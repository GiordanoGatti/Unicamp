
Atividade10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000384  00800100  000004fe  00000592  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  00800484  00800484  00000916  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000916  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000948  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007d9  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000676  00000000  00000000  000011a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e5  00000000  00000000  00001817  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00001bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ce  00000000  00000000  00001d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ba  00000000  00000000  00002116  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000023d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 87 01 	jmp	0x30e	; 0x30e <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 42 01 	jmp	0x284	; 0x284 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	14 e0       	ldi	r17, 0x04	; 4
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ef       	ldi	r30, 0xFE	; 254
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 38       	cpi	r26, 0x84	; 132
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	24 e0       	ldi	r18, 0x04	; 4
  8c:	a4 e8       	ldi	r26, 0x84	; 132
  8e:	b4 e0       	ldi	r27, 0x04	; 4
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 3c       	cpi	r26, 0xC1	; 193
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2e 02 	call	0x45c	; 0x45c <main>
  9e:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <trocaled>:
unsigned char triangular[200] = {0, 3, 5, 8, 10, 13, 15, 18, 20, 23, 26, 28, 31, 33, 36, 38, 41, 43, 46, 48, 51, 54, 56, 59, 61, 64, 66, 69, 71, 74, 77, 79, 82, 84, 87, 89, 92, 94, 97, 99, 102, 105, 107, 110, 112, 115, 117, 120, 122, 125, 128, 130, 133, 135, 138, 140, 143, 145, 148, 150, 153, 156, 158, 161, 163, 166, 168, 171, 173, 176, 179, 181, 184, 186, 189, 191, 194, 196, 199, 201, 204, 207, 209, 212, 214, 217, 219, 222, 224, 227, 230, 232, 235, 237, 240, 242, 245, 247, 250, 252, 255, 252, 250, 247, 245, 242, 240, 237, 235, 232, 230, 227, 224, 222, 219, 217, 214, 212, 209, 207, 204, 201, 199, 196, 194, 191, 189, 186, 184, 181, 179, 176, 173, 171, 168, 166, 163, 161, 158, 156, 153, 150, 148, 145, 143, 140, 138, 135, 133, 130, 128, 125, 122, 120, 117, 115, 112, 110, 107, 105, 102, 99, 97, 94, 92, 89, 87, 84, 82, 79, 77, 74, 71, 69, 66, 64, 61, 59, 56, 54, 51, 48, 46, 43, 41, 38, 36, 33, 31, 28, 26, 23, 20, 18, 15, 13, 10, 8, 5, 3}; // vetor da onda triangular
unsigned char dente_serra[200] = {0, 1, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 17, 18, 19, 20, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 217, 218, 219, 221, 222, 223, 224, 226, 227, 228, 230, 231, 232, 233, 235, 236, 237, 238, 240, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 254}; // vetor da onda dente de serra
unsigned char am[200] = {128, 141, 155, 168, 181, 192, 203, 211, 218, 223, 226, 226, 223, 218, 211, 201, 189, 176, 161, 145, 128, 110, 93, 76, 60, 46, 34, 23, 16, 10, 8, 9, 13, 19, 29, 41, 55, 71, 89, 108, 127, 147, 166, 185, 202, 217, 230, 241, 249, 253, 255, 253, 249, 241, 230, 217, 202, 185, 166, 147, 128, 108, 89, 71, 55, 41, 29, 19, 13, 9, 8, 10, 16, 23, 34, 46, 60, 76, 93, 110, 127, 145, 161, 176, 189, 201, 211, 218, 223, 226, 226, 223, 218, 211, 203, 192, 181, 168, 155, 141, 128, 114, 102, 91, 81, 72, 65, 60, 57, 55, 56, 58, 62, 67, 73, 81, 90, 99, 108, 118, 127, 137, 145, 153, 160, 166, 171, 175, 177, 178, 178, 177, 174, 171, 166, 161, 155, 148, 142, 135, 128, 121, 114, 108, 102, 97, 93, 89, 87, 86, 85, 86, 87, 89, 93, 97, 102, 108, 114, 121, 127, 135, 142, 148, 155, 161, 166, 171, 174, 177, 178, 178, 177, 175, 171, 166, 160, 153, 145, 137, 128, 118, 108, 99, 90, 81, 73, 67, 62, 58, 56, 55, 57, 60, 65, 72, 81, 91, 102, 114}; // vetor da onda AM


void trocaled(){ // função definida de maneira a trocar o estado do led, utilizando a variavel 'led' como parametro do estado do led, se 0 apagado, se 1 aceso. caso o led estiver apagado, ao acionar a função o mesmo é colocado em nivel alto, e a porta equivalente ao led também. caso o led já estiver aceso, a variavel é levada para nivel baixo bem como sua porta correspondente
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
	
	if (led == 0){PORTB |= 0b00100000;
  ae:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <led>
  b2:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <led+0x1>
  b6:	89 2b       	or	r24, r25
  b8:	81 f4       	brne	.+32     	; 0xda <trocaled+0x34>
  ba:	85 e2       	ldi	r24, 0x25	; 37
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	25 e2       	ldi	r18, 0x25	; 37
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	f9 01       	movw	r30, r18
  c4:	20 81       	ld	r18, Z
  c6:	20 62       	ori	r18, 0x20	; 32
  c8:	fc 01       	movw	r30, r24
  ca:	20 83       	st	Z, r18
	led = 1;}
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <led+0x1>
  d4:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <led>
	else if (led == 1){PORTB &= 0b11011111;
	led = 0;}
}
  d8:	13 c0       	rjmp	.+38     	; 0x100 <trocaled+0x5a>

void trocaled(){ // função definida de maneira a trocar o estado do led, utilizando a variavel 'led' como parametro do estado do led, se 0 apagado, se 1 aceso. caso o led estiver apagado, ao acionar a função o mesmo é colocado em nivel alto, e a porta equivalente ao led também. caso o led já estiver aceso, a variavel é levada para nivel baixo bem como sua porta correspondente
	
	if (led == 0){PORTB |= 0b00100000;
	led = 1;}
	else if (led == 1){PORTB &= 0b11011111;
  da:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <led>
  de:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <led+0x1>
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	69 f4       	brne	.+26     	; 0x100 <trocaled+0x5a>
  e6:	85 e2       	ldi	r24, 0x25	; 37
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	25 e2       	ldi	r18, 0x25	; 37
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	f9 01       	movw	r30, r18
  f0:	20 81       	ld	r18, Z
  f2:	2f 7d       	andi	r18, 0xDF	; 223
  f4:	fc 01       	movw	r30, r24
  f6:	20 83       	st	Z, r18
	led = 0;}
  f8:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <led+0x1>
  fc:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <led>
}
 100:	00 00       	nop
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <__vector_18>:


ISR(USART_RX_vect){ //interrupção de recepção da uart 
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	2f 93       	push	r18
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
 11a:	af 93       	push	r26
 11c:	bf 93       	push	r27
 11e:	ef 93       	push	r30
 120:	ff 93       	push	r31
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
	letrarecebida = UDR0; //string recebida pela uart em UDR0 é transsferida para a variavel letrarecebida
 12a:	86 ec       	ldi	r24, 0xC6	; 198
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	fc 01       	movw	r30, r24
 130:	80 81       	ld	r24, Z
 132:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <letrarecebida>
	
	if(letrarecebida == 's') {strcpy(msgtrans, "Onda senoidal\n"); UDR0 = msgtrans[0]; contmax = 62500; l = 1;} //de acordo com o caractere contido em letrarecebida, a string que se deseja transmitir é copiada para a variavel msgtrans, e então o primeiro valor (caractere 0 da string) já é transmitido para UDR0 para ser transmitido, dando inicio a transmissão (UDR0 não inicia a contagem vazio). Nessa etapa de acordo com a letra em letrarecebida, também é configurada a frequencia com que o led piscara em contmax(valor necessario de interrupções do temporizador para que passe o tempo exato para o led acender ou apagar: frequencia da interrupção = 62,5 KHz). Também é definido pela variavel l se o led deve piscar ou não (1 pisca, 0 não pisca) 
 136:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <letrarecebida>
 13a:	83 37       	cpi	r24, 0x73	; 115
 13c:	e1 f4       	brne	.+56     	; 0x176 <__vector_18+0x6e>
 13e:	8f e0       	ldi	r24, 0x0F	; 15
 140:	e2 e2       	ldi	r30, 0x22	; 34
 142:	f4 e0       	ldi	r31, 0x04	; 4
 144:	af e8       	ldi	r26, 0x8F	; 143
 146:	b4 e0       	ldi	r27, 0x04	; 4
 148:	01 90       	ld	r0, Z+
 14a:	0d 92       	st	X+, r0
 14c:	8a 95       	dec	r24
 14e:	e1 f7       	brne	.-8      	; 0x148 <__vector_18+0x40>
 150:	86 ec       	ldi	r24, 0xC6	; 198
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	20 91 8f 04 	lds	r18, 0x048F	; 0x80048f <msgtrans>
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18
 15c:	84 e2       	ldi	r24, 0x24	; 36
 15e:	94 ef       	ldi	r25, 0xF4	; 244
 160:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <contmax+0x1>
 164:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <contmax>
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <l+0x1>
 170:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <l>
	else if(letrarecebida == 't') {strcpy(msgtrans, "Onda triangular\n"); UDR0 = msgtrans[0]; contmax = 31250; l = 1;}
	else if(letrarecebida == 'd') {strcpy(msgtrans, "Onda dente-de-serra\n"); UDR0 = msgtrans[0]; contmax = 15625; l = 1;}
	else if(letrarecebida == 'a') {strcpy(msgtrans, "Onda AM\n"); UDR0 = msgtrans[0]; contmax = 7813; l = 1;}
	else {strcpy(msgtrans, "Nenhuma forma de onda selecionada\n"); UDR0 = msgtrans[0]; contmax = 0; l = 0;}	
	}
 174:	77 c0       	rjmp	.+238    	; 0x264 <__vector_18+0x15c>

ISR(USART_RX_vect){ //interrupção de recepção da uart 
	letrarecebida = UDR0; //string recebida pela uart em UDR0 é transsferida para a variavel letrarecebida
	
	if(letrarecebida == 's') {strcpy(msgtrans, "Onda senoidal\n"); UDR0 = msgtrans[0]; contmax = 62500; l = 1;} //de acordo com o caractere contido em letrarecebida, a string que se deseja transmitir é copiada para a variavel msgtrans, e então o primeiro valor (caractere 0 da string) já é transmitido para UDR0 para ser transmitido, dando inicio a transmissão (UDR0 não inicia a contagem vazio). Nessa etapa de acordo com a letra em letrarecebida, também é configurada a frequencia com que o led piscara em contmax(valor necessario de interrupções do temporizador para que passe o tempo exato para o led acender ou apagar: frequencia da interrupção = 62,5 KHz). Também é definido pela variavel l se o led deve piscar ou não (1 pisca, 0 não pisca) 
	else if(letrarecebida == 't') {strcpy(msgtrans, "Onda triangular\n"); UDR0 = msgtrans[0]; contmax = 31250; l = 1;}
 176:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <letrarecebida>
 17a:	84 37       	cpi	r24, 0x74	; 116
 17c:	e1 f4       	brne	.+56     	; 0x1b6 <__vector_18+0xae>
 17e:	81 e1       	ldi	r24, 0x11	; 17
 180:	e1 e3       	ldi	r30, 0x31	; 49
 182:	f4 e0       	ldi	r31, 0x04	; 4
 184:	af e8       	ldi	r26, 0x8F	; 143
 186:	b4 e0       	ldi	r27, 0x04	; 4
 188:	01 90       	ld	r0, Z+
 18a:	0d 92       	st	X+, r0
 18c:	8a 95       	dec	r24
 18e:	e1 f7       	brne	.-8      	; 0x188 <__vector_18+0x80>
 190:	86 ec       	ldi	r24, 0xC6	; 198
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	20 91 8f 04 	lds	r18, 0x048F	; 0x80048f <msgtrans>
 198:	fc 01       	movw	r30, r24
 19a:	20 83       	st	Z, r18
 19c:	82 e1       	ldi	r24, 0x12	; 18
 19e:	9a e7       	ldi	r25, 0x7A	; 122
 1a0:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <contmax+0x1>
 1a4:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <contmax>
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <l+0x1>
 1b0:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <l>
	else if(letrarecebida == 'd') {strcpy(msgtrans, "Onda dente-de-serra\n"); UDR0 = msgtrans[0]; contmax = 15625; l = 1;}
	else if(letrarecebida == 'a') {strcpy(msgtrans, "Onda AM\n"); UDR0 = msgtrans[0]; contmax = 7813; l = 1;}
	else {strcpy(msgtrans, "Nenhuma forma de onda selecionada\n"); UDR0 = msgtrans[0]; contmax = 0; l = 0;}	
	}
 1b4:	57 c0       	rjmp	.+174    	; 0x264 <__vector_18+0x15c>
ISR(USART_RX_vect){ //interrupção de recepção da uart 
	letrarecebida = UDR0; //string recebida pela uart em UDR0 é transsferida para a variavel letrarecebida
	
	if(letrarecebida == 's') {strcpy(msgtrans, "Onda senoidal\n"); UDR0 = msgtrans[0]; contmax = 62500; l = 1;} //de acordo com o caractere contido em letrarecebida, a string que se deseja transmitir é copiada para a variavel msgtrans, e então o primeiro valor (caractere 0 da string) já é transmitido para UDR0 para ser transmitido, dando inicio a transmissão (UDR0 não inicia a contagem vazio). Nessa etapa de acordo com a letra em letrarecebida, também é configurada a frequencia com que o led piscara em contmax(valor necessario de interrupções do temporizador para que passe o tempo exato para o led acender ou apagar: frequencia da interrupção = 62,5 KHz). Também é definido pela variavel l se o led deve piscar ou não (1 pisca, 0 não pisca) 
	else if(letrarecebida == 't') {strcpy(msgtrans, "Onda triangular\n"); UDR0 = msgtrans[0]; contmax = 31250; l = 1;}
	else if(letrarecebida == 'd') {strcpy(msgtrans, "Onda dente-de-serra\n"); UDR0 = msgtrans[0]; contmax = 15625; l = 1;}
 1b6:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <letrarecebida>
 1ba:	84 36       	cpi	r24, 0x64	; 100
 1bc:	e1 f4       	brne	.+56     	; 0x1f6 <__vector_18+0xee>
 1be:	85 e1       	ldi	r24, 0x15	; 21
 1c0:	e2 e4       	ldi	r30, 0x42	; 66
 1c2:	f4 e0       	ldi	r31, 0x04	; 4
 1c4:	af e8       	ldi	r26, 0x8F	; 143
 1c6:	b4 e0       	ldi	r27, 0x04	; 4
 1c8:	01 90       	ld	r0, Z+
 1ca:	0d 92       	st	X+, r0
 1cc:	8a 95       	dec	r24
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <__vector_18+0xc0>
 1d0:	86 ec       	ldi	r24, 0xC6	; 198
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	20 91 8f 04 	lds	r18, 0x048F	; 0x80048f <msgtrans>
 1d8:	fc 01       	movw	r30, r24
 1da:	20 83       	st	Z, r18
 1dc:	89 e0       	ldi	r24, 0x09	; 9
 1de:	9d e3       	ldi	r25, 0x3D	; 61
 1e0:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <contmax+0x1>
 1e4:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <contmax>
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <l+0x1>
 1f0:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <l>
	else if(letrarecebida == 'a') {strcpy(msgtrans, "Onda AM\n"); UDR0 = msgtrans[0]; contmax = 7813; l = 1;}
	else {strcpy(msgtrans, "Nenhuma forma de onda selecionada\n"); UDR0 = msgtrans[0]; contmax = 0; l = 0;}	
	}
 1f4:	37 c0       	rjmp	.+110    	; 0x264 <__vector_18+0x15c>
	letrarecebida = UDR0; //string recebida pela uart em UDR0 é transsferida para a variavel letrarecebida
	
	if(letrarecebida == 's') {strcpy(msgtrans, "Onda senoidal\n"); UDR0 = msgtrans[0]; contmax = 62500; l = 1;} //de acordo com o caractere contido em letrarecebida, a string que se deseja transmitir é copiada para a variavel msgtrans, e então o primeiro valor (caractere 0 da string) já é transmitido para UDR0 para ser transmitido, dando inicio a transmissão (UDR0 não inicia a contagem vazio). Nessa etapa de acordo com a letra em letrarecebida, também é configurada a frequencia com que o led piscara em contmax(valor necessario de interrupções do temporizador para que passe o tempo exato para o led acender ou apagar: frequencia da interrupção = 62,5 KHz). Também é definido pela variavel l se o led deve piscar ou não (1 pisca, 0 não pisca) 
	else if(letrarecebida == 't') {strcpy(msgtrans, "Onda triangular\n"); UDR0 = msgtrans[0]; contmax = 31250; l = 1;}
	else if(letrarecebida == 'd') {strcpy(msgtrans, "Onda dente-de-serra\n"); UDR0 = msgtrans[0]; contmax = 15625; l = 1;}
	else if(letrarecebida == 'a') {strcpy(msgtrans, "Onda AM\n"); UDR0 = msgtrans[0]; contmax = 7813; l = 1;}
 1f6:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <letrarecebida>
 1fa:	81 36       	cpi	r24, 0x61	; 97
 1fc:	e1 f4       	brne	.+56     	; 0x236 <__vector_18+0x12e>
 1fe:	89 e0       	ldi	r24, 0x09	; 9
 200:	e7 e5       	ldi	r30, 0x57	; 87
 202:	f4 e0       	ldi	r31, 0x04	; 4
 204:	af e8       	ldi	r26, 0x8F	; 143
 206:	b4 e0       	ldi	r27, 0x04	; 4
 208:	01 90       	ld	r0, Z+
 20a:	0d 92       	st	X+, r0
 20c:	8a 95       	dec	r24
 20e:	e1 f7       	brne	.-8      	; 0x208 <__vector_18+0x100>
 210:	86 ec       	ldi	r24, 0xC6	; 198
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	20 91 8f 04 	lds	r18, 0x048F	; 0x80048f <msgtrans>
 218:	fc 01       	movw	r30, r24
 21a:	20 83       	st	Z, r18
 21c:	85 e8       	ldi	r24, 0x85	; 133
 21e:	9e e1       	ldi	r25, 0x1E	; 30
 220:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <contmax+0x1>
 224:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <contmax>
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <l+0x1>
 230:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <l>
	else {strcpy(msgtrans, "Nenhuma forma de onda selecionada\n"); UDR0 = msgtrans[0]; contmax = 0; l = 0;}	
	}
 234:	17 c0       	rjmp	.+46     	; 0x264 <__vector_18+0x15c>
	
	if(letrarecebida == 's') {strcpy(msgtrans, "Onda senoidal\n"); UDR0 = msgtrans[0]; contmax = 62500; l = 1;} //de acordo com o caractere contido em letrarecebida, a string que se deseja transmitir é copiada para a variavel msgtrans, e então o primeiro valor (caractere 0 da string) já é transmitido para UDR0 para ser transmitido, dando inicio a transmissão (UDR0 não inicia a contagem vazio). Nessa etapa de acordo com a letra em letrarecebida, também é configurada a frequencia com que o led piscara em contmax(valor necessario de interrupções do temporizador para que passe o tempo exato para o led acender ou apagar: frequencia da interrupção = 62,5 KHz). Também é definido pela variavel l se o led deve piscar ou não (1 pisca, 0 não pisca) 
	else if(letrarecebida == 't') {strcpy(msgtrans, "Onda triangular\n"); UDR0 = msgtrans[0]; contmax = 31250; l = 1;}
	else if(letrarecebida == 'd') {strcpy(msgtrans, "Onda dente-de-serra\n"); UDR0 = msgtrans[0]; contmax = 15625; l = 1;}
	else if(letrarecebida == 'a') {strcpy(msgtrans, "Onda AM\n"); UDR0 = msgtrans[0]; contmax = 7813; l = 1;}
	else {strcpy(msgtrans, "Nenhuma forma de onda selecionada\n"); UDR0 = msgtrans[0]; contmax = 0; l = 0;}	
 236:	83 e2       	ldi	r24, 0x23	; 35
 238:	e0 e6       	ldi	r30, 0x60	; 96
 23a:	f4 e0       	ldi	r31, 0x04	; 4
 23c:	af e8       	ldi	r26, 0x8F	; 143
 23e:	b4 e0       	ldi	r27, 0x04	; 4
 240:	01 90       	ld	r0, Z+
 242:	0d 92       	st	X+, r0
 244:	8a 95       	dec	r24
 246:	e1 f7       	brne	.-8      	; 0x240 <__vector_18+0x138>
 248:	86 ec       	ldi	r24, 0xC6	; 198
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	20 91 8f 04 	lds	r18, 0x048F	; 0x80048f <msgtrans>
 250:	fc 01       	movw	r30, r24
 252:	20 83       	st	Z, r18
 254:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <contmax+0x1>
 258:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <contmax>
 25c:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <l+0x1>
 260:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <l>
	}
 264:	00 00       	nop
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	ff 91       	pop	r31
 26c:	ef 91       	pop	r30
 26e:	bf 91       	pop	r27
 270:	af 91       	pop	r26
 272:	9f 91       	pop	r25
 274:	8f 91       	pop	r24
 276:	2f 91       	pop	r18
 278:	0f 90       	pop	r0
 27a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 27e:	0f 90       	pop	r0
 280:	1f 90       	pop	r1
 282:	18 95       	reti

00000284 <__vector_20>:

		
ISR(USART_TX_vect){ //interrupção de transmissão da uart
 284:	1f 92       	push	r1
 286:	0f 92       	push	r0
 288:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 28c:	0f 92       	push	r0
 28e:	11 24       	eor	r1, r1
 290:	2f 93       	push	r18
 292:	3f 93       	push	r19
 294:	8f 93       	push	r24
 296:	9f 93       	push	r25
 298:	ef 93       	push	r30
 29a:	ff 93       	push	r31
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62
	if (msgtrans[m] != '\0'){UDR0 = msgtrans[m]; //enqunto o caractere transmitido não for um fim de string ele transmitirá cada um dos caracteres de msgtrans, colocando os caractere uma a um em UDR0, incrementad o contador m, de 1 ate o fim da string (começa em 1 já que o elemento 0 da string já foi trnasmitido anteriormente)
 2a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2a8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2ac:	81 57       	subi	r24, 0x71	; 113
 2ae:	9b 4f       	sbci	r25, 0xFB	; 251
 2b0:	fc 01       	movw	r30, r24
 2b2:	80 81       	ld	r24, Z
 2b4:	88 23       	and	r24, r24
 2b6:	b1 f0       	breq	.+44     	; 0x2e4 <__vector_20+0x60>
 2b8:	86 ec       	ldi	r24, 0xC6	; 198
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 2c0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 2c4:	21 57       	subi	r18, 0x71	; 113
 2c6:	3b 4f       	sbci	r19, 0xFB	; 251
 2c8:	f9 01       	movw	r30, r18
 2ca:	20 81       	ld	r18, Z
 2cc:	fc 01       	movw	r30, r24
 2ce:	20 83       	st	Z, r18
							m++;}
 2d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2d4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	else {m = 1;} //ao chegar no fim da string o processo recomeça
	}
 2e2:	06 c0       	rjmp	.+12     	; 0x2f0 <__vector_20+0x6c>

		
ISR(USART_TX_vect){ //interrupção de transmissão da uart
	if (msgtrans[m] != '\0'){UDR0 = msgtrans[m]; //enqunto o caractere transmitido não for um fim de string ele transmitirá cada um dos caracteres de msgtrans, colocando os caractere uma a um em UDR0, incrementad o contador m, de 1 ate o fim da string (começa em 1 já que o elemento 0 da string já foi trnasmitido anteriormente)
							m++;}
	else {m = 1;} //ao chegar no fim da string o processo recomeça
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
 2f0:	00 00       	nop
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	ff 91       	pop	r31
 2f8:	ef 91       	pop	r30
 2fa:	9f 91       	pop	r25
 2fc:	8f 91       	pop	r24
 2fe:	3f 91       	pop	r19
 300:	2f 91       	pop	r18
 302:	0f 90       	pop	r0
 304:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <__vector_9>:

	
ISR(TIMER2_OVF_vect){ // interrupção de overflow do timer (frequencia 62,5 KHz)
 30e:	1f 92       	push	r1
 310:	0f 92       	push	r0
 312:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 316:	0f 92       	push	r0
 318:	11 24       	eor	r1, r1
 31a:	2f 93       	push	r18
 31c:	3f 93       	push	r19
 31e:	4f 93       	push	r20
 320:	5f 93       	push	r21
 322:	6f 93       	push	r22
 324:	7f 93       	push	r23
 326:	8f 93       	push	r24
 328:	9f 93       	push	r25
 32a:	af 93       	push	r26
 32c:	bf 93       	push	r27
 32e:	ef 93       	push	r30
 330:	ff 93       	push	r31
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	cd b7       	in	r28, 0x3d	; 61
 338:	de b7       	in	r29, 0x3e	; 62
	x++; //incrementa a variavel x
 33a:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <x>
 33e:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <x+0x1>
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <x+0x1>
 348:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <x>
	if(x == contmax && l == 1){trocaled(); x = 0;} //no momento em que o contador x atingir o valor da variavel contmax[o tempo necessario para que o led troque de estado (trocaled) terá passado] e se a variavel l (que habilita ou não o led piscar) tiver alta, o estado do led trocará.
 34c:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <x>
 350:	30 91 89 04 	lds	r19, 0x0489	; 0x800489 <x+0x1>
 354:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <contmax>
 358:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <contmax+0x1>
 35c:	28 17       	cp	r18, r24
 35e:	39 07       	cpc	r19, r25
 360:	61 f4       	brne	.+24     	; 0x37a <__vector_9+0x6c>
 362:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <l>
 366:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <l+0x1>
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	31 f4       	brne	.+12     	; 0x37a <__vector_9+0x6c>
 36e:	0e 94 53 00 	call	0xa6	; 0xa6 <trocaled>
 372:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <x+0x1>
 376:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <x>
		
	if (letrarecebida == 's'){OCR2A = senoidal[n];} //de acordo com a letra recebida em UDR0 (letrarecebida), o vetor da onda que se deseja gerar é selecionadda, e cada um dos valores amostrados é transmitido pelo contador n
 37a:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <letrarecebida>
 37e:	83 37       	cpi	r24, 0x73	; 115
 380:	69 f4       	brne	.+26     	; 0x39c <__vector_9+0x8e>
 382:	83 eb       	ldi	r24, 0xB3	; 179
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	20 91 84 04 	lds	r18, 0x0484	; 0x800484 <__data_end>
 38a:	30 91 85 04 	lds	r19, 0x0485	; 0x800485 <__data_end+0x1>
 38e:	2e 5f       	subi	r18, 0xFE	; 254
 390:	3e 4f       	sbci	r19, 0xFE	; 254
 392:	f9 01       	movw	r30, r18
 394:	20 81       	ld	r18, Z
 396:	fc 01       	movw	r30, r24
 398:	20 83       	st	Z, r18
 39a:	37 c0       	rjmp	.+110    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	else if (letrarecebida == 't'){OCR2A = triangular[n];}
 39c:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <letrarecebida>
 3a0:	84 37       	cpi	r24, 0x74	; 116
 3a2:	69 f4       	brne	.+26     	; 0x3be <__vector_9+0xb0>
 3a4:	83 eb       	ldi	r24, 0xB3	; 179
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	20 91 84 04 	lds	r18, 0x0484	; 0x800484 <__data_end>
 3ac:	30 91 85 04 	lds	r19, 0x0485	; 0x800485 <__data_end+0x1>
 3b0:	26 53       	subi	r18, 0x36	; 54
 3b2:	3e 4f       	sbci	r19, 0xFE	; 254
 3b4:	f9 01       	movw	r30, r18
 3b6:	20 81       	ld	r18, Z
 3b8:	fc 01       	movw	r30, r24
 3ba:	20 83       	st	Z, r18
 3bc:	26 c0       	rjmp	.+76     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	else if (letrarecebida == 'd'){OCR2A = dente_serra[n];}
 3be:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <letrarecebida>
 3c2:	84 36       	cpi	r24, 0x64	; 100
 3c4:	69 f4       	brne	.+26     	; 0x3e0 <__vector_9+0xd2>
 3c6:	83 eb       	ldi	r24, 0xB3	; 179
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	20 91 84 04 	lds	r18, 0x0484	; 0x800484 <__data_end>
 3ce:	30 91 85 04 	lds	r19, 0x0485	; 0x800485 <__data_end+0x1>
 3d2:	2e 56       	subi	r18, 0x6E	; 110
 3d4:	3d 4f       	sbci	r19, 0xFD	; 253
 3d6:	f9 01       	movw	r30, r18
 3d8:	20 81       	ld	r18, Z
 3da:	fc 01       	movw	r30, r24
 3dc:	20 83       	st	Z, r18
 3de:	15 c0       	rjmp	.+42     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	else if (letrarecebida == 'a'){OCR2A = am[n];}
 3e0:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <letrarecebida>
 3e4:	81 36       	cpi	r24, 0x61	; 97
 3e6:	69 f4       	brne	.+26     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3e8:	83 eb       	ldi	r24, 0xB3	; 179
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	20 91 84 04 	lds	r18, 0x0484	; 0x800484 <__data_end>
 3f0:	30 91 85 04 	lds	r19, 0x0485	; 0x800485 <__data_end+0x1>
 3f4:	26 5a       	subi	r18, 0xA6	; 166
 3f6:	3c 4f       	sbci	r19, 0xFC	; 252
 3f8:	f9 01       	movw	r30, r18
 3fa:	20 81       	ld	r18, Z
 3fc:	fc 01       	movw	r30, r24
 3fe:	20 83       	st	Z, r18
 400:	04 c0       	rjmp	.+8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	else {OCR2A = 0;}
 402:	83 eb       	ldi	r24, 0xB3	; 179
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	fc 01       	movw	r30, r24
 408:	10 82       	st	Z, r1
	n++; //contador n é incrementado para passar cada um dos elementos do vetor das ondas para OCR2A
 40a:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__data_end>
 40e:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <__data_end+0x1>
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <__data_end+0x1>
 418:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <__data_end>
	if (n == 200){n = 0;} // ao chegar no fim do vetor (tamanho do vetor de onda = 200), o processo é reiniciado (função periodica)
 41c:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__data_end>
 420:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <__data_end+0x1>
 424:	88 3c       	cpi	r24, 0xC8	; 200
 426:	91 05       	cpc	r25, r1
 428:	21 f4       	brne	.+8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42a:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <__data_end+0x1>
 42e:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <__data_end>
}
 432:	00 00       	nop
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	ff 91       	pop	r31
 43a:	ef 91       	pop	r30
 43c:	bf 91       	pop	r27
 43e:	af 91       	pop	r26
 440:	9f 91       	pop	r25
 442:	8f 91       	pop	r24
 444:	7f 91       	pop	r23
 446:	6f 91       	pop	r22
 448:	5f 91       	pop	r21
 44a:	4f 91       	pop	r20
 44c:	3f 91       	pop	r19
 44e:	2f 91       	pop	r18
 450:	0f 90       	pop	r0
 452:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 456:	0f 90       	pop	r0
 458:	1f 90       	pop	r1
 45a:	18 95       	reti

0000045c <main>:


int main(void)
{
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	cd b7       	in	r28, 0x3d	; 61
 462:	de b7       	in	r29, 0x3e	; 62
	
	UBRR0H &= 0xf0; //força os quatro ultimos bits do registrador para 0
 464:	85 ec       	ldi	r24, 0xC5	; 197
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	25 ec       	ldi	r18, 0xC5	; 197
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	f9 01       	movw	r30, r18
 46e:	20 81       	ld	r18, Z
 470:	20 7f       	andi	r18, 0xF0	; 240
 472:	fc 01       	movw	r30, r24
 474:	20 83       	st	Z, r18
	UBRR0L = 103; //pubrrol e pubrroh configuram o baud rate da transmissão, nesse caso, para baud de 9600  o parametro colocado no registrador é 103
 476:	84 ec       	ldi	r24, 0xC4	; 196
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	27 e6       	ldi	r18, 0x67	; 103
 47c:	fc 01       	movw	r30, r24
 47e:	20 83       	st	Z, r18
	UCSR0A &= 0xFC; // força os dois ultimos bits do registrador para 0, configurando velocidade de transsmissão normal e modo multiprocessador desativado
 480:	80 ec       	ldi	r24, 0xC0	; 192
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	20 ec       	ldi	r18, 0xC0	; 192
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	f9 01       	movw	r30, r18
 48a:	20 81       	ld	r18, Z
 48c:	2c 7f       	andi	r18, 0xFC	; 252
 48e:	fc 01       	movw	r30, r24
 490:	20 83       	st	Z, r18
	UCSR0B = 0xD8; //mantém as interrupções da USART () o 9° bit de transssão desativados, e ativa o modo transmissor e receptor da USART.
 492:	81 ec       	ldi	r24, 0xC1	; 193
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	28 ed       	ldi	r18, 0xD8	; 216
 498:	fc 01       	movw	r30, r24
 49a:	20 83       	st	Z, r18
	UCSR0C = 0x0E; // configura a USART como assincrona, com tamanho de frame de 8 bits, sem o uso de bits de paridade. Também é configurado o uso de dois bits de parada.
 49c:	82 ec       	ldi	r24, 0xC2	; 194
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	2e e0       	ldi	r18, 0x0E	; 14
 4a2:	fc 01       	movw	r30, r24
 4a4:	20 83       	st	Z, r18
	
    DDRB |= 0b00101000; //habilita pino 13 do arduino como saída, em paralelo com o led da placa, bem como o pino 11 para gerar a forma de onda.
 4a6:	84 e2       	ldi	r24, 0x24	; 36
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	24 e2       	ldi	r18, 0x24	; 36
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	f9 01       	movw	r30, r18
 4b0:	20 81       	ld	r18, Z
 4b2:	28 62       	ori	r18, 0x28	; 40
 4b4:	fc 01       	movw	r30, r24
 4b6:	20 83       	st	Z, r18
	
    TCCR2A |= 0x83; //modo fast PWM (contagem fixada para interrupção de 0 a 255)
 4b8:	80 eb       	ldi	r24, 0xB0	; 176
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	20 eb       	ldi	r18, 0xB0	; 176
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	f9 01       	movw	r30, r18
 4c2:	20 81       	ld	r18, Z
 4c4:	23 68       	ori	r18, 0x83	; 131
 4c6:	fc 01       	movw	r30, r24
 4c8:	20 83       	st	Z, r18
    TCCR2B |= 0x01; //prescaler de 1/1 (clock 16Mhz) ----> 256 * [1/(16M/1)] = 1/62,5K [s] (periodo do PWM overflow)
 4ca:	81 eb       	ldi	r24, 0xB1	; 177
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	21 eb       	ldi	r18, 0xB1	; 177
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	f9 01       	movw	r30, r18
 4d4:	20 81       	ld	r18, Z
 4d6:	21 60       	ori	r18, 0x01	; 1
 4d8:	fc 01       	movw	r30, r24
 4da:	20 83       	st	Z, r18
    TIMSK2 |= 0b00000001; //habilita interrupção do tipo overflow
 4dc:	80 e7       	ldi	r24, 0x70	; 112
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	20 e7       	ldi	r18, 0x70	; 112
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	f9 01       	movw	r30, r18
 4e6:	20 81       	ld	r18, Z
 4e8:	21 60       	ori	r18, 0x01	; 1
 4ea:	fc 01       	movw	r30, r24
 4ec:	20 83       	st	Z, r18
    OCR2A = 0x00; //inicia em 0
 4ee:	83 eb       	ldi	r24, 0xB3	; 179
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	fc 01       	movw	r30, r24
 4f4:	10 82       	st	Z, r1
    sei(); //habilita todas as interrupções
 4f6:	78 94       	sei
	
    while (1) 
    {
		
    }
 4f8:	ff cf       	rjmp	.-2      	; 0x4f8 <main+0x9c>

000004fa <_exit>:
 4fa:	f8 94       	cli

000004fc <__stop_program>:
 4fc:	ff cf       	rjmp	.-2      	; 0x4fc <__stop_program>
