
atividade5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000286  0000031a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000286  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080011e  0080011e  00000338  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000003a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000870  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069c  00000000  00000000  00000c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000345  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  0000164c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ca  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f3  00000000  00000000  00001a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001b91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e8       	ldi	r30, 0x86	; 134
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 32       	cpi	r26, 0x20	; 32
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  9e:	0c 94 41 01 	jmp	0x282	; 0x282 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <atraso>:
;ldi r25,0x01 ;são inseridos os bits mais significativos do valor do delay desejado
;ldi r24,0xf4 ;valores dos dois bits menos significativos do valor do delay desejado

;push r25 ;guarda o estado inicial de todos os registradores modificados, na pilha
;push r24
push r16
  a6:	0f 93       	push	r16
push r17
  a8:	1f 93       	push	r17
push r18
  aa:	2f 93       	push	r18
push r19
  ac:	3f 93       	push	r19

//--------------------------------------------------------------//
inc r25 ;incrementa r25 pois na comparação final, r25 é comparado com zero, pois se não fosse incrementado, o caso em que r25=0x00 porem r24=0xff seria desconsiderado (o incremento não corrige isso, mas torna o tempo de execução equivalente ao correto)
  ae:	93 95       	inc	r25

000000b0 <inicio0>:
;rotina de 1ms:
inicio0: ldi r17, 0x07 ;parametros estabelecidos para cada registrador: r17=dois bits mais significativos do parametro; r16=dois bits menos significativos do parametro; r18=dois bits menos significativos do valor a ser incrementado; r19= dois bits mais significativos do valor a ser incrementado 
  b0:	17 e0       	ldi	r17, 0x07	; 7
		 ldi r16, 0xd0 ; o parametro de r17 e r16 é 2000 (0x7d0), que foi estabelecido a partir do numero de operações realizada no primeiro laço, de forma que esse laço realize um atraso próximo a 1 ms
  b2:	00 ed       	ldi	r16, 0xD0	; 208
		 ldi r18, 0x00
  b4:	20 e0       	ldi	r18, 0x00	; 0
		 ldi r19, 0x00
  b6:	30 e0       	ldi	r19, 0x00	; 0

000000b8 <inicio>:

inicio: cp r18, r16 ;r16 comparado com r18 (bits menos significaivos)
  b8:	20 17       	cp	r18, r16
		brne incremento1 ;caso não seja igual, incrementa r18 e verifica se o mesmo está cheio(0xff):caso sim, zera r18 e incremente r19(bit mais significativo). Caso não, retorna ao inicio da rotina e continua incrementando r24.  
  ba:	19 f4       	brne	.+6      	; 0xc2 <incremento1>
		cp r19, r17 ;compara r19 com com r17 (bits mais significaitvos)
  bc:	31 17       	cp	r19, r17
		breq fim1 ; caso tanto r16 quanto r17 forem iguais a r18 e r19 respectivamente, o laço chega ao fim. Caso contrario os registradores continuam sendo incrementados. Para o parametro 2000, essa rotina gera um atraso muito proximo a 1 ms.
  be:	41 f0       	breq	.+16     	; 0xd0 <fim1>
		rjmp incremento1 
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <incremento1>

000000c2 <incremento1>:
	incremento1:	inc r18
  c2:	23 95       	inc	r18
					cpi r18, 0xff
  c4:	2f 3f       	cpi	r18, 0xFF	; 255
					breq incremento2
  c6:	09 f0       	breq	.+2      	; 0xca <incremento2>
					rjmp inicio
  c8:	f7 cf       	rjmp	.-18     	; 0xb8 <inicio>

000000ca <incremento2>:
	incremento2:    inc r19
  ca:	33 95       	inc	r19
					ldi r18, 0x00
  cc:	20 e0       	ldi	r18, 0x00	; 0
					rjmp inicio
  ce:	f4 cf       	rjmp	.-24     	; 0xb8 <inicio>

000000d0 <fim1>:

//--------------------------------------------// 
;rotina que repete a rotina de 1ms o numero de vezes desejada:
fim1: cpi r24, 0x00 ;compara r24(dois bits menos significaticvos) com 0x00, para então decrementa-lo até 0x00, de forma que cada vez que o registrador é decrementado, a rotina de atraso de 1 ms é realizada, realizando então um atraso com o numero de ms entrado inicialmente 
  d0:	80 30       	cpi	r24, 0x00	; 0
	  brne decremento1 ;caso r24 não seja 0, r24 é decrementado e então o programa volta para a rotina de atraso de 1 ms(inicio0)
  d2:	09 f4       	brne	.+2      	; 0xd6 <decremento1>
	  breq decremento2 ;caso r24 seja igual a zero, r25 é decrementado, e r24 volta para 0xff. Caso r25 seja diferente de zero, o programa desvia para a rotina de 1ms, realiza-a, e então vai decrementando r24 novamente. 
  d4:	11 f0       	breq	.+4      	; 0xda <decremento2>

000000d6 <decremento1>:
	  decremento1: dec r24
  d6:	8a 95       	dec	r24
				   rjmp inicio0
  d8:	eb cf       	rjmp	.-42     	; 0xb0 <inicio0>

000000da <decremento2>:
	  decremento2: dec r25
  da:	9a 95       	dec	r25
				   ldi r24, 0xff
  dc:	8f ef       	ldi	r24, 0xFF	; 255
				   cpi r25, 0x00
  de:	90 30       	cpi	r25, 0x00	; 0
				   brne inicio0
  e0:	39 f7       	brne	.-50     	; 0xb0 <inicio0>
				   breq fim2 ;caso r25 seja igual a zero a rotina se encerra (isso gerou um problema inicialmente pois não considera o caso em que r25=0x00 e r24=0xff, em que faltaria realizar mais um cicli de decrementos de r24. Para Corrigir esse erro r25 foi incrementado no inicio da rotina.
  e2:	01 f0       	breq	.+0      	; 0xe4 <fim2>

000000e4 <fim2>:
fim2: ;retorna da pilha  os estados iniciais dos registradores modificados e enccerra a rotina(ret)
pop r19
  e4:	3f 91       	pop	r19
pop r18
  e6:	2f 91       	pop	r18
pop r17
  e8:	1f 91       	pop	r17
pop r16
  ea:	0f 91       	pop	r16
;pop r24
;pop r25
ret
  ec:	08 95       	ret

000000ee <__vector_1>:
//variaveis auxiliares ao programa (velocidade, troca de sentido e contagem)
int s=1;
int v=1000;
int	c=0;

ISR(INT0_vect) { //muda velocidade, divide a mesma por dois a cada borda de subida detectada na interrupção
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
	v = v/2;
  fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 100:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 104:	99 23       	and	r25, r25
 106:	0c f4       	brge	.+2      	; 0x10a <__vector_1+0x1c>
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	95 95       	asr	r25
 10c:	87 95       	ror	r24
 10e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
 116:	9f 91       	pop	r25
 118:	8f 91       	pop	r24
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <__vector_4>:
	
ISR(PCINT1_vect){  //muda sentido, multiplica o parametro por -1(inverte a contagem do parametro) cada vez q a condição *ppinc and 0x01 for verdadeira, já que para pcint o disparo da interrupção sera dado em cada alteração de borda, ou seja na subida E na descida.
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
 132:	ef 93       	push	r30
 134:	ff 93       	push	r31
	if(*ppinc &= 0x01) {
 136:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ppinc>
 13a:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ppinc+0x1>
 13e:	80 81       	ld	r24, Z
 140:	81 70       	andi	r24, 0x01	; 1
 142:	80 83       	st	Z, r24
 144:	88 23       	and	r24, r24
 146:	59 f0       	breq	.+22     	; 0x15e <__vector_4+0x3a>
		s = s*(-1); }
 148:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <s>
 14c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <s+0x1>
 150:	91 95       	neg	r25
 152:	81 95       	neg	r24
 154:	91 09       	sbc	r25, r1
 156:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <s+0x1>
 15a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <s>
	}
 15e:	ff 91       	pop	r31
 160:	ef 91       	pop	r30
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <main>:

int main(void){
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
 178:	28 97       	sbiw	r28, 0x08	; 8
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	f8 94       	cli
 17e:	de bf       	out	0x3e, r29	; 62
 180:	0f be       	out	0x3f, r0	; 63
 182:	cd bf       	out	0x3d, r28	; 61
	
	
	*peicra |= 0x03; //configura eicra para detecção de borda de subida
 184:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <peicra>
 188:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <peicra+0x1>
 18c:	80 81       	ld	r24, Z
 18e:	83 60       	ori	r24, 0x03	; 3
 190:	80 83       	st	Z, r24
	*peimsk |= 0x01; //configura eimsk habilitando interrupções da int0
 192:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <peimsk>
 196:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <peimsk+0x1>
 19a:	80 81       	ld	r24, Z
 19c:	81 60       	ori	r24, 0x01	; 1
 19e:	80 83       	st	Z, r24
	*ppcicr |= 0x02; //configura pcicr habilitando interrupções para pcint8
 1a0:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <ppcicr>
 1a4:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <ppcicr+0x1>
 1a8:	80 81       	ld	r24, Z
 1aa:	82 60       	ori	r24, 0x02	; 2
 1ac:	80 83       	st	Z, r24
	*ppcmsk |= 0x01; // configura pcmsk para o disparo de interrupções a cada borda no int8 
 1ae:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <ppcmsk>
 1b2:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <ppcmsk+0x1>
 1b6:	80 81       	ld	r24, Z
 1b8:	81 60       	ori	r24, 0x01	; 1
 1ba:	80 83       	st	Z, r24
	
	*pddrb |= 0x07; //configura ddrb como saída (leds)
 1bc:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <pddrb>
 1c0:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <pddrb+0x1>
 1c4:	80 81       	ld	r24, Z
 1c6:	87 60       	ori	r24, 0x07	; 7
 1c8:	80 83       	st	Z, r24
	*pddrc &= 0xfe; //configura ddrc como entrada (botão)
 1ca:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <pddrc>
 1ce:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <pddrc+0x1>
 1d2:	80 81       	ld	r24, Z
 1d4:	8e 7f       	andi	r24, 0xFE	; 254
 1d6:	80 83       	st	Z, r24
	*pddrd &= 0xfb; //configura ddrd como entrada (botão)
 1d8:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <pddrd>
 1dc:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <pddrd+0x1>
 1e0:	80 81       	ld	r24, Z
 1e2:	8b 7f       	andi	r24, 0xFB	; 251
 1e4:	80 83       	st	Z, r24
	
	unsigned char estados[8] = {0x00, 0x01, 0x02, 0x04, 0x03, 0x06, 0x05, 0x07}; //define um vetor com os estados desejados sequencialmente
 1e6:	88 e0       	ldi	r24, 0x08	; 8
 1e8:	e6 e1       	ldi	r30, 0x16	; 22
 1ea:	f1 e0       	ldi	r31, 0x01	; 1
 1ec:	de 01       	movw	r26, r28
 1ee:	11 96       	adiw	r26, 0x01	; 1
 1f0:	01 90       	ld	r0, Z+
 1f2:	0d 92       	st	X+, r0
 1f4:	8a 95       	dec	r24
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0x80>
	extern void atraso (short int v); //declara a função de atraso criada em assembly
	asm ("sei"); //função em assembly que habilita todas as interrupções 
 1f8:	78 94       	sei
		*pportb = estados[c]; //coloca a saída como o estado desejado no vetor, (parametro c) em ordem para os leds
		c = c + s; //parametro c é alterado para contagem, crescente ou decrescente caso o sentido seja alterado (parametro s)
		if(c < 0) {c = c + 8;} //torna o vetor circular, de maneira que apos o estado final, o mesmo retorne ao estado inicial
		if(c == 8) {c = c - 8;}
					
		if(v<125){v=1000;} //torna o parametro v circular, de forma que ao se tornar menor que 125ms volte ao estado inicial de 1s
 1fa:	08 ee       	ldi	r16, 0xE8	; 232
 1fc:	13 e0       	ldi	r17, 0x03	; 3
	extern void atraso (short int v); //declara a função de atraso criada em assembly
	asm ("sei"); //função em assembly que habilita todas as interrupções 
	
    while (1) 
    {		
		*pportb = estados[c]; //coloca a saída como o estado desejado no vetor, (parametro c) em ordem para os leds
 1fe:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <pportb>
 202:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <pportb+0x1>
 206:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <__data_end>
 20a:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <__data_end+0x1>
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	8c 0f       	add	r24, r28
 214:	9d 1f       	adc	r25, r29
 216:	e8 0f       	add	r30, r24
 218:	f9 1f       	adc	r31, r25
 21a:	80 81       	ld	r24, Z
 21c:	8c 93       	st	X, r24
		c = c + s; //parametro c é alterado para contagem, crescente ou decrescente caso o sentido seja alterado (parametro s)
 21e:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
 222:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
 226:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <s>
 22a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <s+0x1>
 22e:	82 0f       	add	r24, r18
 230:	93 1f       	adc	r25, r19
		if(c < 0) {c = c + 8;} //torna o vetor circular, de maneira que apos o estado final, o mesmo retorne ao estado inicial
 232:	99 23       	and	r25, r25
 234:	2c f0       	brlt	.+10     	; 0x240 <main+0xd0>
	asm ("sei"); //função em assembly que habilita todas as interrupções 
	
    while (1) 
    {		
		*pportb = estados[c]; //coloca a saída como o estado desejado no vetor, (parametro c) em ordem para os leds
		c = c + s; //parametro c é alterado para contagem, crescente ou decrescente caso o sentido seja alterado (parametro s)
 236:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x1>
 23a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
 23e:	05 c0       	rjmp	.+10     	; 0x24a <main+0xda>
		if(c < 0) {c = c + 8;} //torna o vetor circular, de maneira que apos o estado final, o mesmo retorne ao estado inicial
 240:	08 96       	adiw	r24, 0x08	; 8
 242:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x1>
 246:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
		if(c == 8) {c = c - 8;}
 24a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 24e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
 252:	08 97       	sbiw	r24, 0x08	; 8
 254:	21 f4       	brne	.+8      	; 0x25e <main+0xee>
 256:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <__data_end+0x1>
 25a:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__data_end>
					
		if(v<125){v=1000;} //torna o parametro v circular, de forma que ao se tornar menor que 125ms volte ao estado inicial de 1s
 25e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 262:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 266:	8d 37       	cpi	r24, 0x7D	; 125
 268:	91 05       	cpc	r25, r1
 26a:	24 f4       	brge	.+8      	; 0x274 <main+0x104>
 26c:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <__data_start+0x1>
 270:	00 93 00 01 	sts	0x0100, r16	; 0x800100 <__data_start>
		atraso(v); //chama a função de atraso com parametro v
 274:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 278:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 27c:	0e 94 53 00 	call	0xa6	; 0xa6 <atraso>
			
    }
 280:	be cf       	rjmp	.-132    	; 0x1fe <main+0x8e>

00000282 <_exit>:
 282:	f8 94       	cli

00000284 <__stop_program>:
 284:	ff cf       	rjmp	.-2      	; 0x284 <__stop_program>
