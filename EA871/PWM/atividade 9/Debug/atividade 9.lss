
atividade 9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006b2  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000621  00000000  00000000  00000936  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000028c  00000000  00000000  00000f57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  000011e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000364  00000000  00000000  0000123c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000070  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  88:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_9>:
#include <avr/interrupt.h>

int n = 0;
int w = 0;

ISR(TIMER2_OVF_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
  a0:	ef 93       	push	r30
  a2:	ff 93       	push	r31
	n++;
  a4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <n>
  a8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <n+0x1>
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <n+0x1>
  b2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <n>
	if (n == 50 && w == 0){OCR2B++;
  b6:	c2 97       	sbiw	r24, 0x32	; 50
  b8:	b1 f5       	brne	.+108    	; 0x126 <__vector_9+0x96>
  ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  be:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  c2:	00 97       	sbiw	r24, 0x00	; 0
  c4:	59 f5       	brne	.+86     	; 0x11c <__vector_9+0x8c>
  c6:	e4 eb       	ldi	r30, 0xB4	; 180
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	8f 5f       	subi	r24, 0xFF	; 255
  ce:	80 83       	st	Z, r24
						  n = 0;}
  d0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <n+0x1>
  d4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <n>
  d8:	26 c0       	rjmp	.+76     	; 0x126 <__vector_9+0x96>
	if (OCR2B == 200) {w = 1;}
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if (n == 50 && w == 1) {OCR2B--;
  e6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <n>
  ea:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <n+0x1>
  ee:	c2 97       	sbiw	r24, 0x32	; 50
  f0:	49 f4       	brne	.+18     	; 0x104 <__vector_9+0x74>
  f2:	e4 eb       	ldi	r30, 0xB4	; 180
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	81 50       	subi	r24, 0x01	; 1
  fa:	80 83       	st	Z, r24
							n = 0;}
  fc:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <n+0x1>
 100:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <n>
	if(OCR2B == 0) {w = 0;}
 104:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 108:	81 11       	cpse	r24, r1
 10a:	12 c0       	rjmp	.+36     	; 0x130 <__vector_9+0xa0>
 10c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 110:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
}
 114:	0d c0       	rjmp	.+26     	; 0x130 <__vector_9+0xa0>
ISR(TIMER2_OVF_vect){
	n++;
	if (n == 50 && w == 0){OCR2B++;
						  n = 0;}
	if (OCR2B == 200) {w = 1;}
	if (n == 50 && w == 1) {OCR2B--;
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	a9 f7       	brne	.-22     	; 0x104 <__vector_9+0x74>
 11a:	eb cf       	rjmp	.-42     	; 0xf2 <__vector_9+0x62>

ISR(TIMER2_OVF_vect){
	n++;
	if (n == 50 && w == 0){OCR2B++;
						  n = 0;}
	if (OCR2B == 200) {w = 1;}
 11c:	20 91 b4 00 	lds	r18, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 120:	28 3c       	cpi	r18, 0xC8	; 200
 122:	d9 f2       	breq	.-74     	; 0xda <__vector_9+0x4a>
 124:	f8 cf       	rjmp	.-16     	; 0x116 <__vector_9+0x86>
 126:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 12a:	88 3c       	cpi	r24, 0xC8	; 200
 12c:	59 f7       	brne	.-42     	; 0x104 <__vector_9+0x74>
 12e:	d5 cf       	rjmp	.-86     	; 0xda <__vector_9+0x4a>
	if (n == 50 && w == 1) {OCR2B--;
							n = 0;}
	if(OCR2B == 0) {w = 0;}
}
 130:	ff 91       	pop	r31
 132:	ef 91       	pop	r30
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <main>:


int main(void)
{
	DDRD |= 0b00001000;
 144:	53 9a       	sbi	0x0a, 3	; 10
	TCCR2A |= 0b00100011;
 146:	e0 eb       	ldi	r30, 0xB0	; 176
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	83 62       	ori	r24, 0x23	; 35
 14e:	80 83       	st	Z, r24
	TCCR2B |= 0b00001010;
 150:	e1 eb       	ldi	r30, 0xB1	; 177
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	8a 60       	ori	r24, 0x0A	; 10
 158:	80 83       	st	Z, r24
	TIMSK2 |= 0b00000001;
 15a:	e0 e7       	ldi	r30, 0x70	; 112
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	81 60       	ori	r24, 0x01	; 1
 162:	80 83       	st	Z, r24
	OCR2B = 0;
 164:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	OCR2A = 200;
 168:	88 ec       	ldi	r24, 0xC8	; 200
 16a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	sei();
 16e:	78 94       	sei
 170:	ff cf       	rjmp	.-2      	; 0x170 <main+0x2c>

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
