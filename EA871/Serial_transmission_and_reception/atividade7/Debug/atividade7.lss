
atividade7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012a  00800100  00000836  000008ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000836  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000078  0080022a  0080022a  000009f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000093a  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000744  00000000  00000000  000013e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000480  00000000  00000000  00001b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00001fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000434  00000000  00000000  000020ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a5  00000000  00000000  00002520  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000027c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e3       	ldi	r30, 0x36	; 54
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 3a       	cpi	r26, 0xA2	; 162
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 87 02 	call	0x50e	; 0x50e <main>
  9e:	0c 94 19 04 	jmp	0x832	; 0x832 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adicionar_buffer>:
unsigned char * pddrb = (unsigned char*) 0x24; //configurando os endereços das saídas para o led
unsigned char * pportb = (unsigned char*) 0x25;

//------------------------------------------//

void adicionar_buffer(char c) { //função adicionar buffer, utilizada do experimento 2, porem com buffer de tamanho 10
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	1f 92       	push	r1
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	89 83       	std	Y+1, r24	; 0x01
	if(b < 10){
  b2:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <b>
  b6:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <b+0x1>
  ba:	0a 97       	sbiw	r24, 0x0a	; 10
  bc:	2c f5       	brge	.+74     	; 0x108 <adicionar_buffer+0x62>
		buffer[i] = c;
  be:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <__data_end>
  c2:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <__data_end+0x1>
  c6:	8c 5c       	subi	r24, 0xCC	; 204
  c8:	9d 4f       	sbci	r25, 0xFD	; 253
  ca:	29 81       	ldd	r18, Y+1	; 0x01
  cc:	fc 01       	movw	r30, r24
  ce:	20 83       	st	Z, r18
		i++;
  d0:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <__data_end>
  d4:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <__data_end+0x1>
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <__data_end+0x1>
  de:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <__data_end>
		b++;
  e2:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <b>
  e6:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <b+0x1>
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <b+0x1>
  f0:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <b>
		if(i==10) {i=0;
  f4:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <__data_end>
  f8:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <__data_end+0x1>
  fc:	0a 97       	sbiw	r24, 0x0a	; 10
  fe:	21 f4       	brne	.+8      	; 0x108 <adicionar_buffer+0x62>
 100:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <__data_end+0x1>
 104:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <__data_end>
		}
	}
}
 108:	00 00       	nop
 10a:	0f 90       	pop	r0
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <remover_buffer>:

volatile int saidabuffer = 0;
void remover_buffer() { //função remover buffer também reutilizada do experimento 2, porém com buffer de 10 posições e gerando uma variavel que gurda o valor do caratere que foi removido do buffer
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
	if(b > 0){
 11a:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <b>
 11e:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <b+0x1>
 122:	18 16       	cp	r1, r24
 124:	19 06       	cpc	r1, r25
 126:	54 f5       	brge	.+84     	; 0x17c <remover_buffer+0x6a>
		saidabuffer = buffer[j];
 128:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <j>
 12c:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <j+0x1>
 130:	8c 5c       	subi	r24, 0xCC	; 204
 132:	9d 4f       	sbci	r25, 0xFD	; 253
 134:	fc 01       	movw	r30, r24
 136:	80 81       	ld	r24, Z
 138:	88 2f       	mov	r24, r24
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <saidabuffer+0x1>
 140:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <saidabuffer>
		j++;
 144:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <j>
 148:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <j+0x1>
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <j+0x1>
 152:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <j>
		b = b - 1;
 156:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <b>
 15a:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <b+0x1>
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <b+0x1>
 164:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <b>
		if (j==10) {j=0;
 168:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <j>
 16c:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <j+0x1>
 170:	0a 97       	sbiw	r24, 0x0a	; 10
 172:	21 f4       	brne	.+8      	; 0x17c <remover_buffer+0x6a>
 174:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <j+0x1>
 178:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <j>
		}
	}
}
 17c:	00 00       	nop
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <__vector_20>:

//------------------------------------------//

ISR(USART_TX_vect){ // interrupção de transmissao usart
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	2f 93       	push	r18
 192:	3f 93       	push	r19
 194:	8f 93       	push	r24
 196:	9f 93       	push	r25
 198:	ef 93       	push	r30
 19a:	ff 93       	push	r31
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
if (recado[n] != '\0'){ //enquanto o caractere a ser transmitido não for o fim da string, a mensagem vai sendo transmitida caractere por caractere, sendo n o contador
 1a4:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <n>
 1a8:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <n+0x1>
 1ac:	82 5c       	subi	r24, 0xC2	; 194
 1ae:	9d 4f       	sbci	r25, 0xFD	; 253
 1b0:	fc 01       	movw	r30, r24
 1b2:	80 81       	ld	r24, Z
 1b4:	88 23       	and	r24, r24
 1b6:	c1 f0       	breq	.+48     	; 0x1e8 <__vector_20+0x64>
	*pudr0 = recado[n];//caractere é colocado em udr0
 1b8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pudr0>
 1bc:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <pudr0+0x1>
 1c0:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <n>
 1c4:	30 91 31 02 	lds	r19, 0x0231	; 0x800231 <n+0x1>
 1c8:	22 5c       	subi	r18, 0xC2	; 194
 1ca:	3d 4f       	sbci	r19, 0xFD	; 253
 1cc:	f9 01       	movw	r30, r18
 1ce:	20 81       	ld	r18, Z
 1d0:	fc 01       	movw	r30, r24
 1d2:	20 83       	st	Z, r18
	n++; //contador incrementado
 1d4:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <n>
 1d8:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <n+0x1>
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <n+0x1>
 1e2:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <n>
}
else {n = 0; //ao chegar no fim da mensagem o contador é reiniciado e o controle das flags é setado, para interromper a transmissão
	flag = 1;
}
}
 1e6:	0a c0       	rjmp	.+20     	; 0x1fc <__vector_20+0x78>
ISR(USART_TX_vect){ // interrupção de transmissao usart
if (recado[n] != '\0'){ //enquanto o caractere a ser transmitido não for o fim da string, a mensagem vai sendo transmitida caractere por caractere, sendo n o contador
	*pudr0 = recado[n];//caractere é colocado em udr0
	n++; //contador incrementado
}
else {n = 0; //ao chegar no fim da mensagem o contador é reiniciado e o controle das flags é setado, para interromper a transmissão
 1e8:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <n+0x1>
 1ec:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <n>
	flag = 1;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
}
 1fc:	00 00       	nop
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	ff 91       	pop	r31
 204:	ef 91       	pop	r30
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <__vector_18>:

ISR(USART_RX_vect){ //interrupçao de recepção da usart
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
 226:	2f 93       	push	r18
 228:	3f 93       	push	r19
 22a:	4f 93       	push	r20
 22c:	5f 93       	push	r21
 22e:	6f 93       	push	r22
 230:	7f 93       	push	r23
 232:	8f 93       	push	r24
 234:	9f 93       	push	r25
 236:	af 93       	push	r26
 238:	bf 93       	push	r27
 23a:	ef 93       	push	r30
 23c:	ff 93       	push	r31
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
adicionar_buffer(*pudr0); //ao acionada, faz com que o elemento recebido seja adicionado ao buffer com a função adicionar buffer
 246:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pudr0>
 24a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <pudr0+0x1>
 24e:	fc 01       	movw	r30, r24
 250:	80 81       	ld	r24, Z
 252:	0e 94 53 00 	call	0xa6	; 0xa6 <adicionar_buffer>
}
 256:	00 00       	nop
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	ff 91       	pop	r31
 25e:	ef 91       	pop	r30
 260:	bf 91       	pop	r27
 262:	af 91       	pop	r26
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	7f 91       	pop	r23
 26a:	6f 91       	pop	r22
 26c:	5f 91       	pop	r21
 26e:	4f 91       	pop	r20
 270:	3f 91       	pop	r19
 272:	2f 91       	pop	r18
 274:	0f 90       	pop	r0
 276:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

00000280 <cores>:

//------------------------------------------//


void cores() {
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
 288:	66 97       	sbiw	r28, 0x16	; 22
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	f8 94       	cli
 28e:	de bf       	out	0x3e, r29	; 62
 290:	0f be       	out	0x3f, r0	; 63
 292:	cd bf       	out	0x3d, r28	; 61

unsigned char estados[8] = {0x00, 0x01, 0x02, 0x04, 0x03, 0x06, 0x05, 0x07};//vetor com todos os estados(combinções de cores RGB) que o led utilizará, porém localizado dentro da função
 294:	88 e0       	ldi	r24, 0x08	; 8
 296:	ea e1       	ldi	r30, 0x1A	; 26
 298:	f2 e0       	ldi	r31, 0x02	; 2
 29a:	de 01       	movw	r26, r28
 29c:	1f 96       	adiw	r26, 0x0f	; 15
 29e:	01 90       	ld	r0, Z+
 2a0:	0d 92       	st	X+, r0
 2a2:	8a 95       	dec	r24
 2a4:	e1 f7       	brne	.-8      	; 0x29e <cores+0x1e>

	if (saidabuffer == 'r') { //dependendo da letra que será retirada do buffer e colocada na variavel saidabuffer, o LED(saída da portb) assumirá o estado desejado, além de copiar a mensagem que será transmitida em uma varivel recado.
 2a6:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <saidabuffer>
 2aa:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <saidabuffer+0x1>
 2ae:	82 37       	cpi	r24, 0x72	; 114
 2b0:	91 05       	cpc	r25, r1
 2b2:	89 f4       	brne	.+34     	; 0x2d6 <cores+0x56>
		*pportb = estados[1];
 2b4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pportb>
 2b8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <pportb+0x1>
 2bc:	28 89       	ldd	r18, Y+16	; 0x10
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
		strcpy(recado, "Comando: Acender LED - cor vermelha\n");
 2c2:	85 e2       	ldi	r24, 0x25	; 37
 2c4:	e2 e1       	ldi	r30, 0x12	; 18
 2c6:	f1 e0       	ldi	r31, 0x01	; 1
 2c8:	ae e3       	ldi	r26, 0x3E	; 62
 2ca:	b2 e0       	ldi	r27, 0x02	; 2
 2cc:	01 90       	ld	r0, Z+
 2ce:	0d 92       	st	X+, r0
 2d0:	8a 95       	dec	r24
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <cores+0x4c>
 2d4:	a0 c0       	rjmp	.+320    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	}

	else if (saidabuffer == 'g') {
 2d6:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <saidabuffer>
 2da:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <saidabuffer+0x1>
 2de:	87 36       	cpi	r24, 0x67	; 103
 2e0:	91 05       	cpc	r25, r1
 2e2:	89 f4       	brne	.+34     	; 0x306 <cores+0x86>
		*pportb = estados[2];
 2e4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pportb>
 2e8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <pportb+0x1>
 2ec:	29 89       	ldd	r18, Y+17	; 0x11
 2ee:	fc 01       	movw	r30, r24
 2f0:	20 83       	st	Z, r18
		strcpy(recado, "Comando: Acender LED - cor verde\n");
 2f2:	82 e2       	ldi	r24, 0x22	; 34
 2f4:	e7 e3       	ldi	r30, 0x37	; 55
 2f6:	f1 e0       	ldi	r31, 0x01	; 1
 2f8:	ae e3       	ldi	r26, 0x3E	; 62
 2fa:	b2 e0       	ldi	r27, 0x02	; 2
 2fc:	01 90       	ld	r0, Z+
 2fe:	0d 92       	st	X+, r0
 300:	8a 95       	dec	r24
 302:	e1 f7       	brne	.-8      	; 0x2fc <cores+0x7c>
 304:	88 c0       	rjmp	.+272    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	}

	else if (saidabuffer == 'b') {
 306:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <saidabuffer>
 30a:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <saidabuffer+0x1>
 30e:	82 36       	cpi	r24, 0x62	; 98
 310:	91 05       	cpc	r25, r1
 312:	89 f4       	brne	.+34     	; 0x336 <cores+0xb6>
		*pportb = estados[3];
 314:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pportb>
 318:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <pportb+0x1>
 31c:	2a 89       	ldd	r18, Y+18	; 0x12
 31e:	fc 01       	movw	r30, r24
 320:	20 83       	st	Z, r18
		strcpy(recado, "Comando: Acender LED - cor azul\n");
 322:	81 e2       	ldi	r24, 0x21	; 33
 324:	e9 e5       	ldi	r30, 0x59	; 89
 326:	f1 e0       	ldi	r31, 0x01	; 1
 328:	ae e3       	ldi	r26, 0x3E	; 62
 32a:	b2 e0       	ldi	r27, 0x02	; 2
 32c:	01 90       	ld	r0, Z+
 32e:	0d 92       	st	X+, r0
 330:	8a 95       	dec	r24
 332:	e1 f7       	brne	.-8      	; 0x32c <cores+0xac>
 334:	70 c0       	rjmp	.+224    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	}

	else if (saidabuffer == 'y') {
 336:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <saidabuffer>
 33a:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <saidabuffer+0x1>
 33e:	89 37       	cpi	r24, 0x79	; 121
 340:	91 05       	cpc	r25, r1
 342:	89 f4       	brne	.+34     	; 0x366 <cores+0xe6>
		*pportb = estados[4];
 344:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pportb>
 348:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <pportb+0x1>
 34c:	2b 89       	ldd	r18, Y+19	; 0x13
 34e:	fc 01       	movw	r30, r24
 350:	20 83       	st	Z, r18
		strcpy(recado, "Comando: Acender LED - cor amarela\n");
 352:	84 e2       	ldi	r24, 0x24	; 36
 354:	ea e7       	ldi	r30, 0x7A	; 122
 356:	f1 e0       	ldi	r31, 0x01	; 1
 358:	ae e3       	ldi	r26, 0x3E	; 62
 35a:	b2 e0       	ldi	r27, 0x02	; 2
 35c:	01 90       	ld	r0, Z+
 35e:	0d 92       	st	X+, r0
 360:	8a 95       	dec	r24
 362:	e1 f7       	brne	.-8      	; 0x35c <cores+0xdc>
 364:	58 c0       	rjmp	.+176    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	}

	else if (saidabuffer == 'c') {
 366:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <saidabuffer>
 36a:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <saidabuffer+0x1>
 36e:	83 36       	cpi	r24, 0x63	; 99
 370:	91 05       	cpc	r25, r1
 372:	89 f4       	brne	.+34     	; 0x396 <cores+0x116>
		*pportb = estados[5];
 374:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pportb>
 378:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <pportb+0x1>
 37c:	2c 89       	ldd	r18, Y+20	; 0x14
 37e:	fc 01       	movw	r30, r24
 380:	20 83       	st	Z, r18
		strcpy(recado, "Comando: Acender LED - cor ciano\n");
 382:	82 e2       	ldi	r24, 0x22	; 34
 384:	ee e9       	ldi	r30, 0x9E	; 158
 386:	f1 e0       	ldi	r31, 0x01	; 1
 388:	ae e3       	ldi	r26, 0x3E	; 62
 38a:	b2 e0       	ldi	r27, 0x02	; 2
 38c:	01 90       	ld	r0, Z+
 38e:	0d 92       	st	X+, r0
 390:	8a 95       	dec	r24
 392:	e1 f7       	brne	.-8      	; 0x38c <cores+0x10c>
 394:	40 c0       	rjmp	.+128    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	}

	else if (saidabuffer == 'm') {
 396:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <saidabuffer>
 39a:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <saidabuffer+0x1>
 39e:	8d 36       	cpi	r24, 0x6D	; 109
 3a0:	91 05       	cpc	r25, r1
 3a2:	89 f4       	brne	.+34     	; 0x3c6 <cores+0x146>
		*pportb = estados[6];
 3a4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pportb>
 3a8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <pportb+0x1>
 3ac:	2d 89       	ldd	r18, Y+21	; 0x15
 3ae:	fc 01       	movw	r30, r24
 3b0:	20 83       	st	Z, r18
		strcpy(recado, "Comando: Acender LED - cor magenta\n");
 3b2:	84 e2       	ldi	r24, 0x24	; 36
 3b4:	e0 ec       	ldi	r30, 0xC0	; 192
 3b6:	f1 e0       	ldi	r31, 0x01	; 1
 3b8:	ae e3       	ldi	r26, 0x3E	; 62
 3ba:	b2 e0       	ldi	r27, 0x02	; 2
 3bc:	01 90       	ld	r0, Z+
 3be:	0d 92       	st	X+, r0
 3c0:	8a 95       	dec	r24
 3c2:	e1 f7       	brne	.-8      	; 0x3bc <cores+0x13c>
 3c4:	28 c0       	rjmp	.+80     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	}

	else if (saidabuffer == 'w') {
 3c6:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <saidabuffer>
 3ca:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <saidabuffer+0x1>
 3ce:	87 37       	cpi	r24, 0x77	; 119
 3d0:	91 05       	cpc	r25, r1
 3d2:	89 f4       	brne	.+34     	; 0x3f6 <cores+0x176>
		*pportb = estados[7];
 3d4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pportb>
 3d8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <pportb+0x1>
 3dc:	2e 89       	ldd	r18, Y+22	; 0x16
 3de:	fc 01       	movw	r30, r24
 3e0:	20 83       	st	Z, r18
		strcpy(recado, "Comando: Acender LED - cor branca\n");
 3e2:	83 e2       	ldi	r24, 0x23	; 35
 3e4:	e4 ee       	ldi	r30, 0xE4	; 228
 3e6:	f1 e0       	ldi	r31, 0x01	; 1
 3e8:	ae e3       	ldi	r26, 0x3E	; 62
 3ea:	b2 e0       	ldi	r27, 0x02	; 2
 3ec:	01 90       	ld	r0, Z+
 3ee:	0d 92       	st	X+, r0
 3f0:	8a 95       	dec	r24
 3f2:	e1 f7       	brne	.-8      	; 0x3ec <cores+0x16c>
 3f4:	10 c0       	rjmp	.+32     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	}
	else {*pportb = estados[0];
 3f6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pportb>
 3fa:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <pportb+0x1>
 3fe:	2f 85       	ldd	r18, Y+15	; 0x0f
 400:	fc 01       	movw	r30, r24
 402:	20 83       	st	Z, r18
	strcpy(recado, "Comando incorreto\n");} //caso a letra digitada não seja compativel com nenhuma das que equivalentes as cores que o led pode assumir o led permanece desligado e exibe a mensagem de comando incorreto
 404:	83 e1       	ldi	r24, 0x13	; 19
 406:	e7 e0       	ldi	r30, 0x07	; 7
 408:	f2 e0       	ldi	r31, 0x02	; 2
 40a:	ae e3       	ldi	r26, 0x3E	; 62
 40c:	b2 e0       	ldi	r27, 0x02	; 2
 40e:	01 90       	ld	r0, Z+
 410:	0d 92       	st	X+, r0
 412:	8a 95       	dec	r24
 414:	e1 f7       	brne	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	a8 e4       	ldi	r26, 0x48	; 72
 41c:	b3 e4       	ldi	r27, 0x43	; 67
 41e:	89 83       	std	Y+1, r24	; 0x01
 420:	9a 83       	std	Y+2, r25	; 0x02
 422:	ab 83       	std	Y+3, r26	; 0x03
 424:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 426:	20 e0       	ldi	r18, 0x00	; 0
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	4a e7       	ldi	r20, 0x7A	; 122
 42c:	55 e4       	ldi	r21, 0x45	; 69
 42e:	69 81       	ldd	r22, Y+1	; 0x01
 430:	7a 81       	ldd	r23, Y+2	; 0x02
 432:	8b 81       	ldd	r24, Y+3	; 0x03
 434:	9c 81       	ldd	r25, Y+4	; 0x04
 436:	0e 94 84 03 	call	0x708	; 0x708 <__mulsf3>
 43a:	dc 01       	movw	r26, r24
 43c:	cb 01       	movw	r24, r22
 43e:	8d 83       	std	Y+5, r24	; 0x05
 440:	9e 83       	std	Y+6, r25	; 0x06
 442:	af 83       	std	Y+7, r26	; 0x07
 444:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 446:	20 e0       	ldi	r18, 0x00	; 0
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	40 e8       	ldi	r20, 0x80	; 128
 44c:	5f e3       	ldi	r21, 0x3F	; 63
 44e:	6d 81       	ldd	r22, Y+5	; 0x05
 450:	7e 81       	ldd	r23, Y+6	; 0x06
 452:	8f 81       	ldd	r24, Y+7	; 0x07
 454:	98 85       	ldd	r25, Y+8	; 0x08
 456:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__cmpsf2>
 45a:	88 23       	and	r24, r24
 45c:	2c f4       	brge	.+10     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		__ticks = 1;
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	9a 87       	std	Y+10, r25	; 0x0a
 464:	89 87       	std	Y+9, r24	; 0x09
 466:	3f c0       	rjmp	.+126    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
	else if (__tmp > 65535)
 468:	20 e0       	ldi	r18, 0x00	; 0
 46a:	3f ef       	ldi	r19, 0xFF	; 255
 46c:	4f e7       	ldi	r20, 0x7F	; 127
 46e:	57 e4       	ldi	r21, 0x47	; 71
 470:	6d 81       	ldd	r22, Y+5	; 0x05
 472:	7e 81       	ldd	r23, Y+6	; 0x06
 474:	8f 81       	ldd	r24, Y+7	; 0x07
 476:	98 85       	ldd	r25, Y+8	; 0x08
 478:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__gesf2>
 47c:	18 16       	cp	r1, r24
 47e:	4c f5       	brge	.+82     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 480:	20 e0       	ldi	r18, 0x00	; 0
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	40 e2       	ldi	r20, 0x20	; 32
 486:	51 e4       	ldi	r21, 0x41	; 65
 488:	69 81       	ldd	r22, Y+1	; 0x01
 48a:	7a 81       	ldd	r23, Y+2	; 0x02
 48c:	8b 81       	ldd	r24, Y+3	; 0x03
 48e:	9c 81       	ldd	r25, Y+4	; 0x04
 490:	0e 94 84 03 	call	0x708	; 0x708 <__mulsf3>
 494:	dc 01       	movw	r26, r24
 496:	cb 01       	movw	r24, r22
 498:	bc 01       	movw	r22, r24
 49a:	cd 01       	movw	r24, r26
 49c:	0e 94 03 03 	call	0x606	; 0x606 <__fixunssfsi>
 4a0:	dc 01       	movw	r26, r24
 4a2:	cb 01       	movw	r24, r22
 4a4:	9a 87       	std	Y+10, r25	; 0x0a
 4a6:	89 87       	std	Y+9, r24	; 0x09
 4a8:	0f c0       	rjmp	.+30     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4aa:	80 e9       	ldi	r24, 0x90	; 144
 4ac:	91 e0       	ldi	r25, 0x01	; 1
 4ae:	9c 87       	std	Y+12, r25	; 0x0c
 4b0:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4b2:	8b 85       	ldd	r24, Y+11	; 0x0b
 4b4:	9c 85       	ldd	r25, Y+12	; 0x0c
 4b6:	01 97       	sbiw	r24, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4ba:	9c 87       	std	Y+12, r25	; 0x0c
 4bc:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4be:	89 85       	ldd	r24, Y+9	; 0x09
 4c0:	9a 85       	ldd	r25, Y+10	; 0x0a
 4c2:	01 97       	sbiw	r24, 0x01	; 1
 4c4:	9a 87       	std	Y+10, r25	; 0x0a
 4c6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4c8:	89 85       	ldd	r24, Y+9	; 0x09
 4ca:	9a 85       	ldd	r25, Y+10	; 0x0a
 4cc:	89 2b       	or	r24, r25
 4ce:	69 f7       	brne	.-38     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
		
_delay_ms(200); //atraso de 200ms
}
 4d0:	14 c0       	rjmp	.+40     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4d2:	6d 81       	ldd	r22, Y+5	; 0x05
 4d4:	7e 81       	ldd	r23, Y+6	; 0x06
 4d6:	8f 81       	ldd	r24, Y+7	; 0x07
 4d8:	98 85       	ldd	r25, Y+8	; 0x08
 4da:	0e 94 03 03 	call	0x606	; 0x606 <__fixunssfsi>
 4de:	dc 01       	movw	r26, r24
 4e0:	cb 01       	movw	r24, r22
 4e2:	9a 87       	std	Y+10, r25	; 0x0a
 4e4:	89 87       	std	Y+9, r24	; 0x09
 4e6:	89 85       	ldd	r24, Y+9	; 0x09
 4e8:	9a 85       	ldd	r25, Y+10	; 0x0a
 4ea:	9e 87       	std	Y+14, r25	; 0x0e
 4ec:	8d 87       	std	Y+13, r24	; 0x0d
 4ee:	8d 85       	ldd	r24, Y+13	; 0x0d
 4f0:	9e 85       	ldd	r25, Y+14	; 0x0e
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4f6:	9e 87       	std	Y+14, r25	; 0x0e
 4f8:	8d 87       	std	Y+13, r24	; 0x0d
 4fa:	00 00       	nop
 4fc:	66 96       	adiw	r28, 0x16	; 22
 4fe:	0f b6       	in	r0, 0x3f	; 63
 500:	f8 94       	cli
 502:	de bf       	out	0x3e, r29	; 62
 504:	0f be       	out	0x3f, r0	; 63
 506:	cd bf       	out	0x3d, r28	; 61
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	08 95       	ret

0000050e <main>:

//------------------------------------------//


int main(void){
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	cd b7       	in	r28, 0x3d	; 61
 514:	de b7       	in	r29, 0x3e	; 62
 516:	28 97       	sbiw	r28, 0x08	; 8
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	f8 94       	cli
 51c:	de bf       	out	0x3e, r29	; 62
 51e:	0f be       	out	0x3f, r0	; 63
 520:	cd bf       	out	0x3d, r28	; 61

*pubrroh = 0x00;
 522:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pubrroh>
 526:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <pubrroh+0x1>
 52a:	fc 01       	movw	r30, r24
 52c:	10 82       	st	Z, r1
*pubrrol = 103; //pubrrol e pubrroh configuram o baud rate da transmissão, nesse caso, para baud de 9600  o parametro colocado no registrador é 103
 52e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pubrrol>
 532:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pubrrol+0x1>
 536:	27 e6       	ldi	r18, 0x67	; 103
 538:	fc 01       	movw	r30, r24
 53a:	20 83       	st	Z, r18
*pucsroa &= 0xFC; // força os dois ultimos bits do registrador para 0, configurando velocidade de transsmissão normal e modo multiprocessador desativado
 53c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pucsroa>
 540:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <pucsroa+0x1>
 544:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <pucsroa>
 548:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <pucsroa+0x1>
 54c:	f9 01       	movw	r30, r18
 54e:	20 81       	ld	r18, Z
 550:	2c 7f       	andi	r18, 0xFC	; 252
 552:	fc 01       	movw	r30, r24
 554:	20 83       	st	Z, r18
*puscrob = 0xD8; //mantém as interrupções da USART () o 9° bit de transssão desativados, e ativa o modo transmissor e receptor da USART.
 556:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <puscrob>
 55a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <puscrob+0x1>
 55e:	28 ed       	ldi	r18, 0xD8	; 216
 560:	fc 01       	movw	r30, r24
 562:	20 83       	st	Z, r18
*puscroc = 0x0E; // configura a USART como assincrona, com tamanho de frame de 8 bits, sem o uso de bits de paridade. Também é configurado o uso de dois bits de parada.
 564:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <puscroc>
 568:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <puscroc+0x1>
 56c:	2e e0       	ldi	r18, 0x0E	; 14
 56e:	fc 01       	movw	r30, r24
 570:	20 83       	st	Z, r18

*pddrb |= 0x07; //são setados os tres primeiros bits do ddrb como saidas
 572:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pddrb>
 576:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <pddrb+0x1>
 57a:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <pddrb>
 57e:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <pddrb+0x1>
 582:	f9 01       	movw	r30, r18
 584:	20 81       	ld	r18, Z
 586:	27 60       	ori	r18, 0x07	; 7
 588:	fc 01       	movw	r30, r24
 58a:	20 83       	st	Z, r18
sei(); //habilita todas as interrupções 
 58c:	78 94       	sei

unsigned char estados[8] = {0x00, 0x01, 0x02, 0x04, 0x03, 0x06, 0x05, 0x07}; //vetor com todos os estados que o led utilizará
 58e:	28 e0       	ldi	r18, 0x08	; 8
 590:	ea e1       	ldi	r30, 0x1A	; 26
 592:	f2 e0       	ldi	r31, 0x02	; 2
 594:	ce 01       	movw	r24, r28
 596:	01 96       	adiw	r24, 0x01	; 1
 598:	dc 01       	movw	r26, r24
 59a:	01 90       	ld	r0, Z+
 59c:	0d 92       	st	X+, r0
 59e:	2a 95       	dec	r18
 5a0:	e1 f7       	brne	.-8      	; 0x59a <main+0x8c>
    
    while (1) 
    {
		if (flag == 1){ //caso o controle da transmissão estiver setado, o registrador de dados da usar recebe fim de string, e a flag de controle vai para 0, podendo dar inicio a uma nova transmissão
 5a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 5aa:	01 97       	sbiw	r24, 0x01	; 1
 5ac:	51 f4       	brne	.+20     	; 0x5c2 <main+0xb4>
			*pudr0 = '\0';
 5ae:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pudr0>
 5b2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <pudr0+0x1>
 5b6:	fc 01       	movw	r30, r24
 5b8:	10 82       	st	Z, r1
			flag = 0;
 5ba:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 5be:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		}
		if (b > 0) { //caso o buffer não esteja vazio, o mesmo remove os valores que foram colocados no buffer, um a um, e são jogados na variavel saidabuffer, a partir da qual cada um dos elementos será identificado e será entrada para a função cores, na qual será selecionada a mensagem e o estado de cor do led, correspondente
 5c2:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <b>
 5c6:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <b+0x1>
 5ca:	18 16       	cp	r1, r24
 5cc:	19 06       	cpc	r1, r25
 5ce:	2c f4       	brge	.+10     	; 0x5da <main+0xcc>
			remover_buffer();
 5d0:	0e 94 89 00 	call	0x112	; 0x112 <remover_buffer>
			cores();
 5d4:	0e 94 40 01 	call	0x280	; 0x280 <cores>
 5d8:	e4 cf       	rjmp	.-56     	; 0x5a2 <main+0x94>
		}
		else {*pportb = estados[0]; //enqunto o buffer estiver vazio, o led permanecerá apagado e o recado dado será vazio.
 5da:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pportb>
 5de:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <pportb+0x1>
 5e2:	29 81       	ldd	r18, Y+1	; 0x01
 5e4:	fc 01       	movw	r30, r24
 5e6:	20 83       	st	Z, r18
			strcpy(recado, "Vazio!\n");
 5e8:	88 e0       	ldi	r24, 0x08	; 8
 5ea:	e2 e2       	ldi	r30, 0x22	; 34
 5ec:	f2 e0       	ldi	r31, 0x02	; 2
 5ee:	ae e3       	ldi	r26, 0x3E	; 62
 5f0:	b2 e0       	ldi	r27, 0x02	; 2
 5f2:	01 90       	ld	r0, Z+
 5f4:	0d 92       	st	X+, r0
 5f6:	8a 95       	dec	r24
 5f8:	e1 f7       	brne	.-8      	; 0x5f2 <main+0xe4>
		}
	}
 5fa:	d3 cf       	rjmp	.-90     	; 0x5a2 <main+0x94>

000005fc <__cmpsf2>:
 5fc:	0e 94 32 03 	call	0x664	; 0x664 <__fp_cmp>
 600:	08 f4       	brcc	.+2      	; 0x604 <__cmpsf2+0x8>
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	08 95       	ret

00000606 <__fixunssfsi>:
 606:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__fp_splitA>
 60a:	88 f0       	brcs	.+34     	; 0x62e <__fixunssfsi+0x28>
 60c:	9f 57       	subi	r25, 0x7F	; 127
 60e:	98 f0       	brcs	.+38     	; 0x636 <__fixunssfsi+0x30>
 610:	b9 2f       	mov	r27, r25
 612:	99 27       	eor	r25, r25
 614:	b7 51       	subi	r27, 0x17	; 23
 616:	b0 f0       	brcs	.+44     	; 0x644 <__fixunssfsi+0x3e>
 618:	e1 f0       	breq	.+56     	; 0x652 <__fixunssfsi+0x4c>
 61a:	66 0f       	add	r22, r22
 61c:	77 1f       	adc	r23, r23
 61e:	88 1f       	adc	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	1a f0       	brmi	.+6      	; 0x62a <__fixunssfsi+0x24>
 624:	ba 95       	dec	r27
 626:	c9 f7       	brne	.-14     	; 0x61a <__fixunssfsi+0x14>
 628:	14 c0       	rjmp	.+40     	; 0x652 <__fixunssfsi+0x4c>
 62a:	b1 30       	cpi	r27, 0x01	; 1
 62c:	91 f0       	breq	.+36     	; 0x652 <__fixunssfsi+0x4c>
 62e:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fp_zero>
 632:	b1 e0       	ldi	r27, 0x01	; 1
 634:	08 95       	ret
 636:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <__fp_zero>
 63a:	67 2f       	mov	r22, r23
 63c:	78 2f       	mov	r23, r24
 63e:	88 27       	eor	r24, r24
 640:	b8 5f       	subi	r27, 0xF8	; 248
 642:	39 f0       	breq	.+14     	; 0x652 <__fixunssfsi+0x4c>
 644:	b9 3f       	cpi	r27, 0xF9	; 249
 646:	cc f3       	brlt	.-14     	; 0x63a <__fixunssfsi+0x34>
 648:	86 95       	lsr	r24
 64a:	77 95       	ror	r23
 64c:	67 95       	ror	r22
 64e:	b3 95       	inc	r27
 650:	d9 f7       	brne	.-10     	; 0x648 <__fixunssfsi+0x42>
 652:	3e f4       	brtc	.+14     	; 0x662 <__fixunssfsi+0x5c>
 654:	90 95       	com	r25
 656:	80 95       	com	r24
 658:	70 95       	com	r23
 65a:	61 95       	neg	r22
 65c:	7f 4f       	sbci	r23, 0xFF	; 255
 65e:	8f 4f       	sbci	r24, 0xFF	; 255
 660:	9f 4f       	sbci	r25, 0xFF	; 255
 662:	08 95       	ret

00000664 <__fp_cmp>:
 664:	99 0f       	add	r25, r25
 666:	00 08       	sbc	r0, r0
 668:	55 0f       	add	r21, r21
 66a:	aa 0b       	sbc	r26, r26
 66c:	e0 e8       	ldi	r30, 0x80	; 128
 66e:	fe ef       	ldi	r31, 0xFE	; 254
 670:	16 16       	cp	r1, r22
 672:	17 06       	cpc	r1, r23
 674:	e8 07       	cpc	r30, r24
 676:	f9 07       	cpc	r31, r25
 678:	c0 f0       	brcs	.+48     	; 0x6aa <__fp_cmp+0x46>
 67a:	12 16       	cp	r1, r18
 67c:	13 06       	cpc	r1, r19
 67e:	e4 07       	cpc	r30, r20
 680:	f5 07       	cpc	r31, r21
 682:	98 f0       	brcs	.+38     	; 0x6aa <__fp_cmp+0x46>
 684:	62 1b       	sub	r22, r18
 686:	73 0b       	sbc	r23, r19
 688:	84 0b       	sbc	r24, r20
 68a:	95 0b       	sbc	r25, r21
 68c:	39 f4       	brne	.+14     	; 0x69c <__fp_cmp+0x38>
 68e:	0a 26       	eor	r0, r26
 690:	61 f0       	breq	.+24     	; 0x6aa <__fp_cmp+0x46>
 692:	23 2b       	or	r18, r19
 694:	24 2b       	or	r18, r20
 696:	25 2b       	or	r18, r21
 698:	21 f4       	brne	.+8      	; 0x6a2 <__fp_cmp+0x3e>
 69a:	08 95       	ret
 69c:	0a 26       	eor	r0, r26
 69e:	09 f4       	brne	.+2      	; 0x6a2 <__fp_cmp+0x3e>
 6a0:	a1 40       	sbci	r26, 0x01	; 1
 6a2:	a6 95       	lsr	r26
 6a4:	8f ef       	ldi	r24, 0xFF	; 255
 6a6:	81 1d       	adc	r24, r1
 6a8:	81 1d       	adc	r24, r1
 6aa:	08 95       	ret

000006ac <__fp_split3>:
 6ac:	57 fd       	sbrc	r21, 7
 6ae:	90 58       	subi	r25, 0x80	; 128
 6b0:	44 0f       	add	r20, r20
 6b2:	55 1f       	adc	r21, r21
 6b4:	59 f0       	breq	.+22     	; 0x6cc <__fp_splitA+0x10>
 6b6:	5f 3f       	cpi	r21, 0xFF	; 255
 6b8:	71 f0       	breq	.+28     	; 0x6d6 <__fp_splitA+0x1a>
 6ba:	47 95       	ror	r20

000006bc <__fp_splitA>:
 6bc:	88 0f       	add	r24, r24
 6be:	97 fb       	bst	r25, 7
 6c0:	99 1f       	adc	r25, r25
 6c2:	61 f0       	breq	.+24     	; 0x6dc <__fp_splitA+0x20>
 6c4:	9f 3f       	cpi	r25, 0xFF	; 255
 6c6:	79 f0       	breq	.+30     	; 0x6e6 <__fp_splitA+0x2a>
 6c8:	87 95       	ror	r24
 6ca:	08 95       	ret
 6cc:	12 16       	cp	r1, r18
 6ce:	13 06       	cpc	r1, r19
 6d0:	14 06       	cpc	r1, r20
 6d2:	55 1f       	adc	r21, r21
 6d4:	f2 cf       	rjmp	.-28     	; 0x6ba <__fp_split3+0xe>
 6d6:	46 95       	lsr	r20
 6d8:	f1 df       	rcall	.-30     	; 0x6bc <__fp_splitA>
 6da:	08 c0       	rjmp	.+16     	; 0x6ec <__fp_splitA+0x30>
 6dc:	16 16       	cp	r1, r22
 6de:	17 06       	cpc	r1, r23
 6e0:	18 06       	cpc	r1, r24
 6e2:	99 1f       	adc	r25, r25
 6e4:	f1 cf       	rjmp	.-30     	; 0x6c8 <__fp_splitA+0xc>
 6e6:	86 95       	lsr	r24
 6e8:	71 05       	cpc	r23, r1
 6ea:	61 05       	cpc	r22, r1
 6ec:	08 94       	sec
 6ee:	08 95       	ret

000006f0 <__fp_zero>:
 6f0:	e8 94       	clt

000006f2 <__fp_szero>:
 6f2:	bb 27       	eor	r27, r27
 6f4:	66 27       	eor	r22, r22
 6f6:	77 27       	eor	r23, r23
 6f8:	cb 01       	movw	r24, r22
 6fa:	97 f9       	bld	r25, 7
 6fc:	08 95       	ret

000006fe <__gesf2>:
 6fe:	0e 94 32 03 	call	0x664	; 0x664 <__fp_cmp>
 702:	08 f4       	brcc	.+2      	; 0x706 <__gesf2+0x8>
 704:	8f ef       	ldi	r24, 0xFF	; 255
 706:	08 95       	ret

00000708 <__mulsf3>:
 708:	0e 94 97 03 	call	0x72e	; 0x72e <__mulsf3x>
 70c:	0c 94 08 04 	jmp	0x810	; 0x810 <__fp_round>
 710:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__fp_pscA>
 714:	38 f0       	brcs	.+14     	; 0x724 <__mulsf3+0x1c>
 716:	0e 94 01 04 	call	0x802	; 0x802 <__fp_pscB>
 71a:	20 f0       	brcs	.+8      	; 0x724 <__mulsf3+0x1c>
 71c:	95 23       	and	r25, r21
 71e:	11 f0       	breq	.+4      	; 0x724 <__mulsf3+0x1c>
 720:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__fp_inf>
 724:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__fp_nan>
 728:	11 24       	eor	r1, r1
 72a:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__fp_szero>

0000072e <__mulsf3x>:
 72e:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fp_split3>
 732:	70 f3       	brcs	.-36     	; 0x710 <__mulsf3+0x8>

00000734 <__mulsf3_pse>:
 734:	95 9f       	mul	r25, r21
 736:	c1 f3       	breq	.-16     	; 0x728 <__mulsf3+0x20>
 738:	95 0f       	add	r25, r21
 73a:	50 e0       	ldi	r21, 0x00	; 0
 73c:	55 1f       	adc	r21, r21
 73e:	62 9f       	mul	r22, r18
 740:	f0 01       	movw	r30, r0
 742:	72 9f       	mul	r23, r18
 744:	bb 27       	eor	r27, r27
 746:	f0 0d       	add	r31, r0
 748:	b1 1d       	adc	r27, r1
 74a:	63 9f       	mul	r22, r19
 74c:	aa 27       	eor	r26, r26
 74e:	f0 0d       	add	r31, r0
 750:	b1 1d       	adc	r27, r1
 752:	aa 1f       	adc	r26, r26
 754:	64 9f       	mul	r22, r20
 756:	66 27       	eor	r22, r22
 758:	b0 0d       	add	r27, r0
 75a:	a1 1d       	adc	r26, r1
 75c:	66 1f       	adc	r22, r22
 75e:	82 9f       	mul	r24, r18
 760:	22 27       	eor	r18, r18
 762:	b0 0d       	add	r27, r0
 764:	a1 1d       	adc	r26, r1
 766:	62 1f       	adc	r22, r18
 768:	73 9f       	mul	r23, r19
 76a:	b0 0d       	add	r27, r0
 76c:	a1 1d       	adc	r26, r1
 76e:	62 1f       	adc	r22, r18
 770:	83 9f       	mul	r24, r19
 772:	a0 0d       	add	r26, r0
 774:	61 1d       	adc	r22, r1
 776:	22 1f       	adc	r18, r18
 778:	74 9f       	mul	r23, r20
 77a:	33 27       	eor	r19, r19
 77c:	a0 0d       	add	r26, r0
 77e:	61 1d       	adc	r22, r1
 780:	23 1f       	adc	r18, r19
 782:	84 9f       	mul	r24, r20
 784:	60 0d       	add	r22, r0
 786:	21 1d       	adc	r18, r1
 788:	82 2f       	mov	r24, r18
 78a:	76 2f       	mov	r23, r22
 78c:	6a 2f       	mov	r22, r26
 78e:	11 24       	eor	r1, r1
 790:	9f 57       	subi	r25, 0x7F	; 127
 792:	50 40       	sbci	r21, 0x00	; 0
 794:	9a f0       	brmi	.+38     	; 0x7bc <__mulsf3_pse+0x88>
 796:	f1 f0       	breq	.+60     	; 0x7d4 <__mulsf3_pse+0xa0>
 798:	88 23       	and	r24, r24
 79a:	4a f0       	brmi	.+18     	; 0x7ae <__mulsf3_pse+0x7a>
 79c:	ee 0f       	add	r30, r30
 79e:	ff 1f       	adc	r31, r31
 7a0:	bb 1f       	adc	r27, r27
 7a2:	66 1f       	adc	r22, r22
 7a4:	77 1f       	adc	r23, r23
 7a6:	88 1f       	adc	r24, r24
 7a8:	91 50       	subi	r25, 0x01	; 1
 7aa:	50 40       	sbci	r21, 0x00	; 0
 7ac:	a9 f7       	brne	.-22     	; 0x798 <__mulsf3_pse+0x64>
 7ae:	9e 3f       	cpi	r25, 0xFE	; 254
 7b0:	51 05       	cpc	r21, r1
 7b2:	80 f0       	brcs	.+32     	; 0x7d4 <__mulsf3_pse+0xa0>
 7b4:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__fp_inf>
 7b8:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__fp_szero>
 7bc:	5f 3f       	cpi	r21, 0xFF	; 255
 7be:	e4 f3       	brlt	.-8      	; 0x7b8 <__mulsf3_pse+0x84>
 7c0:	98 3e       	cpi	r25, 0xE8	; 232
 7c2:	d4 f3       	brlt	.-12     	; 0x7b8 <__mulsf3_pse+0x84>
 7c4:	86 95       	lsr	r24
 7c6:	77 95       	ror	r23
 7c8:	67 95       	ror	r22
 7ca:	b7 95       	ror	r27
 7cc:	f7 95       	ror	r31
 7ce:	e7 95       	ror	r30
 7d0:	9f 5f       	subi	r25, 0xFF	; 255
 7d2:	c1 f7       	brne	.-16     	; 0x7c4 <__mulsf3_pse+0x90>
 7d4:	fe 2b       	or	r31, r30
 7d6:	88 0f       	add	r24, r24
 7d8:	91 1d       	adc	r25, r1
 7da:	96 95       	lsr	r25
 7dc:	87 95       	ror	r24
 7de:	97 f9       	bld	r25, 7
 7e0:	08 95       	ret

000007e2 <__fp_inf>:
 7e2:	97 f9       	bld	r25, 7
 7e4:	9f 67       	ori	r25, 0x7F	; 127
 7e6:	80 e8       	ldi	r24, 0x80	; 128
 7e8:	70 e0       	ldi	r23, 0x00	; 0
 7ea:	60 e0       	ldi	r22, 0x00	; 0
 7ec:	08 95       	ret

000007ee <__fp_nan>:
 7ee:	9f ef       	ldi	r25, 0xFF	; 255
 7f0:	80 ec       	ldi	r24, 0xC0	; 192
 7f2:	08 95       	ret

000007f4 <__fp_pscA>:
 7f4:	00 24       	eor	r0, r0
 7f6:	0a 94       	dec	r0
 7f8:	16 16       	cp	r1, r22
 7fa:	17 06       	cpc	r1, r23
 7fc:	18 06       	cpc	r1, r24
 7fe:	09 06       	cpc	r0, r25
 800:	08 95       	ret

00000802 <__fp_pscB>:
 802:	00 24       	eor	r0, r0
 804:	0a 94       	dec	r0
 806:	12 16       	cp	r1, r18
 808:	13 06       	cpc	r1, r19
 80a:	14 06       	cpc	r1, r20
 80c:	05 06       	cpc	r0, r21
 80e:	08 95       	ret

00000810 <__fp_round>:
 810:	09 2e       	mov	r0, r25
 812:	03 94       	inc	r0
 814:	00 0c       	add	r0, r0
 816:	11 f4       	brne	.+4      	; 0x81c <__fp_round+0xc>
 818:	88 23       	and	r24, r24
 81a:	52 f0       	brmi	.+20     	; 0x830 <__fp_round+0x20>
 81c:	bb 0f       	add	r27, r27
 81e:	40 f4       	brcc	.+16     	; 0x830 <__fp_round+0x20>
 820:	bf 2b       	or	r27, r31
 822:	11 f4       	brne	.+4      	; 0x828 <__fp_round+0x18>
 824:	60 ff       	sbrs	r22, 0
 826:	04 c0       	rjmp	.+8      	; 0x830 <__fp_round+0x20>
 828:	6f 5f       	subi	r22, 0xFF	; 255
 82a:	7f 4f       	sbci	r23, 0xFF	; 255
 82c:	8f 4f       	sbci	r24, 0xFF	; 255
 82e:	9f 4f       	sbci	r25, 0xFF	; 255
 830:	08 95       	ret

00000832 <_exit>:
 832:	f8 94       	cli

00000834 <__stop_program>:
 834:	ff cf       	rjmp	.-2      	; 0x834 <__stop_program>
